{"ast":null,"code":"import _slicedToArray from\"/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Form,Input,Button,Label}from'reactstrap';import'../App.css';import initialContent from'../redux/initialContent';//import initialContent from './initialContent'\nvar EditBox=function EditBox(props){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),edit=_useState4[0],setEdit=_useState4[1];var field_index=2;var placeHolder=\"\";var type=\"text\";var fontSize=\"20px\";var myContent=null;if(props.myContent===null){myContent=initialContent;}else{myContent=props.myContent;}var fields=[myContent.id,myContent.password,myContent.title,myContent.titleFontSize,myContent.description,myContent.descriptionFontSize];//var currentText = \"\"\nconsole.log(\"EditBox: props.myContent\",JSON.stringify(props.myContent),\" props.feild_name: \",props.field_name);//switch (props.myContent !== null && props.field_name){\nswitch(props.field_name){case\"title\":if(text===null){setText(props.myContent.title);}fontSize=props.myContent.titleFontSize;placeHolder=\"restrunt name\";break;case\"description\":if(text===null){setText(props.myContent.description);}fontSize=props.myContent.descriptionFontSize;field_index=4;placeHolder=\"restrunt description\";type=\"textarea\";}function handleChange(event){console.log(\"EditBox: event.value: \",event.target.value);setText(event.target.value);console.log(\"EditBox: text: \",text);}function handleSubmit(event){fields[field_index]=text;console.log(fields);props.putContent(fields);setEdit(false);event.preventDefault();}function handleOnClick(){setEdit(true);}function handleFontSize(amount){var size=parseInt(fontSize.slice(0,fontSize.length-2));if(size<8){alert(\"this is the minimum size\");return;}if(size>60){alert(\"this is the maximum size\");return;}fields[field_index+1]=String(size+amount)+\"px\";console.log(fields);props.putContent(fields);}if(edit){return/*#__PURE__*/React.createElement(Form,{onSubmit:function onSubmit(event){return handleSubmit(event);}},/*#__PURE__*/React.createElement(Input,{style:{fontSize:fontSize},type:type,value:text,onChange:function onChange(event){return handleChange(event);},placeholder:placeHolder}),/*#__PURE__*/React.createElement(\"button\",{className:\"button button-edit-box\",type:\"submit\"},\"save\"));//<Button type=\"submit\" value=\"Submit\" className='editBoxButton'>save</Button>\n}else{return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"row\",style:{padding:\"10px\"}},/*#__PURE__*/React.createElement(\"div\",{className:\"col-12\",style:{fontSize:fontSize,mb:0}},text),/*#__PURE__*/React.createElement(\"div\",{className:\"col-12\"},/*#__PURE__*/React.createElement(Button,{style:{height:'22px',width:'50px',fontSize:'14px',padding:'0px'},onClick:function onClick(){return handleOnClick();}},\"edit\"),/*#__PURE__*/React.createElement(Button,{style:{height:'22px',width:'22px',fontSize:'14px',padding:'0px'},onClick:function onClick(){return handleFontSize(+2);}},/*#__PURE__*/React.createElement(\"span\",{className:\"fa fa-angle-up\"})),/*#__PURE__*/React.createElement(Button,{style:{height:'22px',width:'22px',padding:'0px'},onClick:function onClick(){return handleFontSize(-2);}},/*#__PURE__*/React.createElement(\"span\",{className:\"fa fa-angle-down\"})))));}};export default EditBox;/*\nimport React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Modal, ModalBody, ModalHeader, Label, Col , Row } from 'reactstrap'\nimport { Control, Form, Errors, Input} from 'react-redux-form';\n\nclass EditBox extends Component{\n\n    constructor(props){\n        super (props)\n\n        this.state = {\n            edit: false,\n            text:this.props.text\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(values){\n        console.log(\"handleSubmit\", values)\n        this.props.putText(this.state.text, this.props.id, this.props.username);\n\n        this.setState({\n            edit: !this.state.edit\n        });\n    }\n\n\n    onClick(){\n\n        console.log(\"onClick\", this.state.edit)\n        this.setState({\n            edit: !this.state.edit\n        });\n    }\n\n    handleInputChange(event){\n            // This will update specific key in your form object inside the local state\n        this.setState({\n            form: Object.assign({}, this.state.form, {\n            [event.target.text]: event.target.value,\n        }),\n        });\n    }\n\n\n    render(){\n\n        \n\n        if(this.state.edit){\n\n            return( \n                <div>\n            <Form model=\"text\" onSubmit={(values) => this.handleSubmit(values)}>\n                <Control.textarea model=\".text\" id={this.props.id} name=\"text\" style = {{fontSize:\"35px\"}}\n                    rows={this.props.rows_num} \n                    className=\"form-control\"  \n                    onChange={event => this.handleInputChange(event)}\n                    defaultValue={this.props.text}/>\n\n                <Button type=\"submit\">save</Button>\n            </Form>\n\n            \n                </div>\n            );        \n            // onChange={this.handleInputChange}                   \n        }               \n        else{\n            return(\n            <div>\n                <div className = 'row'>\n                    <span style = {{fontSize:\"45px\", fontWeight:\"normal\"}}>{this.props.text} </span>\n                </div>\n                \n                <div className = 'row'>\n                    <Button onClick={()=>this.onClick()}>edit</Button>\n                </div>\n            </div>\n            );\n        }\n\n    }\n}\n\nexport default EditBox;\n\n*/","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/src/component/EditBoxComponent.js"],"names":["React","useState","useEffect","Form","Input","Button","Label","initialContent","EditBox","props","text","setText","edit","setEdit","field_index","placeHolder","type","fontSize","myContent","fields","id","password","title","titleFontSize","description","descriptionFontSize","console","log","JSON","stringify","field_name","handleChange","event","target","value","handleSubmit","putContent","preventDefault","handleOnClick","handleFontSize","amount","size","parseInt","slice","length","alert","String","padding","mb","height","width"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Form, Input, Button, Label} from 'reactstrap';\nimport '../App.css';\nimport initialContent from '../redux/initialContent'\n//import initialContent from './initialContent'\n\n\nconst EditBox = (props) => {\n\n    const [text, setText] = useState(null);\n    const [edit, setEdit] = useState(false);\n\n    var field_index = 2;\n    var placeHolder=\"\";\n    var type = \"text\";\n    var fontSize = \"20px\"    \n    var myContent = null;\n\n    if(props.myContent === null){\n        myContent = initialContent;\n    } else{\n        myContent = props.myContent;\n    }\n    var fields = [myContent.id, myContent.password, myContent.title, myContent.titleFontSize,\n        myContent.description , myContent.descriptionFontSize];\n    \n    //var currentText = \"\"\n    console.log(\"EditBox: props.myContent\", JSON.stringify(props.myContent), \" props.feild_name: \", props.field_name)\n    //switch (props.myContent !== null && props.field_name){\n    switch (props.field_name){\n        case \"title\":\n            if (text === null){\n                setText(props.myContent.title)\n            }\n            fontSize = props.myContent.titleFontSize;\n            placeHolder=\"restrunt name\";\n            break;\n\n        case \"description\":\n            if (text === null){\n                setText(props.myContent.description);\n            }\n            fontSize = props.myContent.descriptionFontSize;\n            field_index = 4;\n            placeHolder=\"restrunt description\";\n            type = \"textarea\";\n    }\n    \n    \n    function handleChange(event){        \n        console.log(\"EditBox: event.value: \", event.target.value);\n        setText(event.target.value);\n        console.log(\"EditBox: text: \", text);\n    }\n    \n  \n    function handleSubmit(event){\n        fields[field_index] = text;\n        console.log(fields);\n        props.putContent(fields);\n        setEdit(false)\n        event.preventDefault();\n    }\n    function handleOnClick(){\n        setEdit(true);\n    }\n    function handleFontSize(amount){\n        const size = parseInt(fontSize.slice(0, fontSize.length-2))\n        if(size < 8){\n            alert(\"this is the minimum size\");\n            return;\n        } if(size > 60){\n            alert(\"this is the maximum size\");\n            return;\n        } \n\n        fields[field_index+1] = String(size + amount) + \"px\";\n        console.log(fields);\n        props.putContent(fields);\n    }\n\n    \n    if(edit){\n        return(\n            <Form onSubmit={(event)=> handleSubmit(event)}>\n                <Input  style={{fontSize:fontSize}} type={type} value={text} onChange={(event) => handleChange(event)}\n                    placeholder={placeHolder}/>\n                <button className=\"button button-edit-box\" type=\"submit\" >save</button>\n            </Form>\n        );\n        //<Button type=\"submit\" value=\"Submit\" className='editBoxButton'>save</Button>\n    }\n    else{\n\n        return(\n            <div>\n                <div className=\"row\"  style={{ padding: \"10px\"}}>\n                        <div  className=\"col-12\" style={{fontSize:fontSize, mb:0}}>{text}</div> \n                        <div  className=\"col-12\" >\n                            <Button style={{height: '22px', width : '50px', fontSize:'14px', padding:'0px'}}\n                                  onClick={()=>handleOnClick()}>edit</Button>\n                            <Button style={{height: '22px', width : '22px', fontSize:'14px', padding:'0px'}}\n                                  onClick={()=>handleFontSize(+2)}>\n                                <span className=\"fa fa-angle-up\"></span></Button>\n                            <Button style={{height: '22px', width : '22px', padding:'0px'}}\n                                    onClick={()=>handleFontSize(-2)}>\n                                <span className=\"fa fa-angle-down\"></span></Button>\n                        </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default EditBox;\n\n\n\n\n\n\n/*\nimport React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Modal, ModalBody, ModalHeader, Label, Col , Row } from 'reactstrap'\nimport { Control, Form, Errors, Input} from 'react-redux-form';\n\nclass EditBox extends Component{\n\n    constructor(props){\n        super (props)\n\n        this.state = {\n            edit: false,\n            text:this.props.text\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(values){\n        console.log(\"handleSubmit\", values)\n        this.props.putText(this.state.text, this.props.id, this.props.username);\n\n        this.setState({\n            edit: !this.state.edit\n        });\n    }\n\n\n    onClick(){\n\n        console.log(\"onClick\", this.state.edit)\n        this.setState({\n            edit: !this.state.edit\n        });\n    }\n\n    handleInputChange(event){\n            // This will update specific key in your form object inside the local state\n        this.setState({\n            form: Object.assign({}, this.state.form, {\n            [event.target.text]: event.target.value,\n        }),\n        });\n    }\n\n\n    render(){\n\n        \n\n        if(this.state.edit){\n\n            return( \n                <div>\n            <Form model=\"text\" onSubmit={(values) => this.handleSubmit(values)}>\n                <Control.textarea model=\".text\" id={this.props.id} name=\"text\" style = {{fontSize:\"35px\"}}\n                    rows={this.props.rows_num} \n                    className=\"form-control\"  \n                    onChange={event => this.handleInputChange(event)}\n                    defaultValue={this.props.text}/>\n\n                <Button type=\"submit\">save</Button>\n            </Form>\n\n            \n                </div>\n            );        \n            // onChange={this.handleInputChange}                   \n        }               \n        else{\n            return(\n            <div>\n                <div className = 'row'>\n                    <span style = {{fontSize:\"45px\", fontWeight:\"normal\"}}>{this.props.text} </span>\n                </div>\n                \n                <div className = 'row'>\n                    <Button onClick={()=>this.onClick()}>edit</Button>\n                </div>\n            </div>\n            );\n        }\n\n    }\n}\n\nexport default EditBox;\n\n*/"]},"metadata":{},"sourceType":"module"}