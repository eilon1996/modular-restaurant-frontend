{"ast":null,"code":"var _jsxFileName = \"/home/eilon/programing/full-stack/confusion-new/confusion/src/component/UploadS3.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport '../uploadS3.css';\nimport Dropzone from 'react-dropzone-uploader';\n\nconst UploadS3 = props => {\n  const [progess, setprogess] = useState(\"p0\"); // specify upload params and url for your files\n  // responsible for the progress bar\n  //const getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\n  // called every time a file's `status` changes\n\n  const handleChangeStatus = ({\n    meta,\n    file\n  }, status) => {\n    console.log(status, meta, file); // turn in to progress bar\n\n    if (status === \"done\") {\n      var data = new FormData();\n      var ending = file.name.split('.');\n      const imgName = \"users/\" + props.type + \"/\" + props.myId + \"-\" + props.itemId + \".\" + ending[ending.length - 1];\n      console.log(\"imgName, file\", imgName, file);\n      data.append('image', file, imgName);\n      var config = {\n        method: 'POST',\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true,\n        dirName: 'users/dishes',\n\n        /* optional, not working */\n        crossorigin: true,\n        url: \"https://warm-fjord-92793.herokuapp.com/upload\",\n        //url: process.env.BACKEND_PORT+\"/upload\",\n        data: data\n      };\n      axios(config).then(function (response) {\n        console.log(JSON.stringify(\"axios response\", JSON.stringify(response)));\n        props.setImgUrl(response.data);\n      }).catch(function (error) {\n        console.log(\"error\", error);\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone //getUploadParams={getUploadParams} // responsible for the progress bar\n  , {\n    onChangeStatus: handleChangeStatus,\n    accept: \"image/*\",\n    maxFiles: 1,\n    inputContent: (files, extra) => extra.reject ? 'Only Image file is allowed' : 'Drop Image Here',\n    styles: {\n      dropzoneReject: {\n        borderColor: '#F19373',\n        backgroundColor: '#F1BDAB'\n      },\n      inputLabel: (files, extra) => extra.reject ? {\n        color: '#A02800'\n      } : {}\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    id: progress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  })));\n}; // to add submit button to the dropzone add in <Dropzone>   onSubmit={handleSubmit}\n\n\nexport default UploadS3;","map":{"version":3,"sources":["/home/eilon/programing/full-stack/confusion-new/confusion/src/component/UploadS3.js"],"names":["React","useState","axios","Dropzone","UploadS3","props","progess","setprogess","handleChangeStatus","meta","file","status","console","log","data","FormData","ending","name","split","imgName","type","myId","itemId","length","append","config","method","dirName","crossorigin","url","then","response","JSON","stringify","setImgUrl","catch","error","files","extra","reject","dropzoneReject","borderColor","backgroundColor","inputLabel","color","progress"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport 'react-dropzone-uploader/dist/styles.css'\nimport '../uploadS3.css';\n\nimport Dropzone from 'react-dropzone-uploader'\n\n\n\nconst UploadS3 = (props) => {\n\n    const [progess, setprogess] = useState(\"p0\");\n\n    \n        // specify upload params and url for your files\n        // responsible for the progress bar\n        //const getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\n\n        // called every time a file's `status` changes\n        const handleChangeStatus = ({ meta, file }, status) => {\n            console.log(status, meta, file) // turn in to progress bar\n            if (status === \"done\") {\n                var data = new FormData();\n                var ending = file.name.split('.');\n                const imgName = \"users/\"+props.type+\"/\"+props.myId+\"-\"+props.itemId+\".\"+ending[ending.length-1];\n                console.log(\"imgName, file\",imgName, file)\n                data.append('image', file, imgName);\n\n                var config = {\n                    method: 'POST',\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"Access-Control-Allow-Credentials\":true,\n                    dirName: 'users/dishes', /* optional, not working */\n                    crossorigin:true,\n                    url: \"https://warm-fjord-92793.herokuapp.com/upload\",\n                    //url: process.env.BACKEND_PORT+\"/upload\",\n                    data: data\n                };\n\n                axios(config)\n                    .then(function(response){\n                        console.log(JSON.stringify(\"axios response\",JSON.stringify(response)));\n                        props.setImgUrl(response.data);\n                    })\n                    .catch(function (error) {\n                        console.log(\"error\", error);\n                    });\n            }\n        }\n\n\n\n        return (\n            <div>\n            <Dropzone\n                //getUploadParams={getUploadParams} // responsible for the progress bar\n                onChangeStatus={handleChangeStatus}\n                accept=\"image/*\"\n                maxFiles={1}\n                inputContent={(files, extra) => (extra.reject ? 'Only Image file is allowed' : 'Drop Image Here')}\n                styles={{\n                    dropzoneReject: { borderColor: '#F19373', backgroundColor: '#F1BDAB' },\n                    inputLabel: (files, extra) => (extra.reject ? { color: '#A02800' } : {}),\n                }}\n            />\n            <div className=\"wrapper\">\n                <div className=\"progress\" id={progress}></div>\n            </div>\n            </div>\n        )\n    }\n\n// to add submit button to the dropzone add in <Dropzone>   onSubmit={handleSubmit}\n\n\nexport default UploadS3;"]},"metadata":{},"sourceType":"module"}