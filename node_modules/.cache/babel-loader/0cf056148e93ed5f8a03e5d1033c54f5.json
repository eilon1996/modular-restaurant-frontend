{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl'; ///////////feedback///////////\n\nexport const submitFeedback = (firstName, lastName, telNum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstName: firstName,\n    lastName: lastName,\n    telNum: telNum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  }; //previesdly the id and the date where added in comments.js\n\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    //related to the backend \n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('submmit feedback', error.message);\n    alert('Your feedback could not be submited\\nError: ' + error.message);\n  });\n};\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: feedback\n}); ///////////comments////////////\n//since this is a punc, I need to add the dispatch. So, I'll send the function of a function\n\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  }; //previesdly the id and the date where added in comments.js\n\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    //related to the backend \n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n}); //////////// LEADERS //////////////\n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => {\n  return {\n    type: ActionTypes.LEADERS_FAILED,\n    payload: errmess\n  };\n};\nexport const addLeaders = leaders => {\n  //alert(\"action creator, leader: \"+ JSON.stringify(leaders))\n  return {\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n  };\n};\n/*\nexport const addLeaders = (leaders) => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\n*/\n//////////// DISHES //////////////\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n}; //returning an action\n\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => {\n  //alert(\"actionCreator.js - dishesFailed: \"+ errmess);\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n  };\n};\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n}); //////////// COMMENTS //////////////\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n}); //////////// PROMOTIONS //////////////\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion2/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","submitFeedback","firstName","lastName","telNum","email","agree","contactType","message","dispatch","newFeedback","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","addComment","catch","console","log","alert","addFeedback","feedback","type","ADD_COMMENT","payload","postComment","dishId","rating","author","comment","newComment","fetchLeaders","leadersLoading","errmess","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["\nimport * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n\n///////////feedback///////////\n\nexport const submitFeedback = ( firstName, lastName, telNum, email, agree, contactType, message) => (dispatch) => {\n\n  const newFeedback = {\n    firstName: firstName,\n    lastName: lastName,\n    telNum: telNum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  \n //previesdly the id and the date where added in comments.js\n  newFeedback.date = new Date().toISOString();\n  \n  return fetch(baseUrl + 'feedback', {\n      method: \"POST\",\n      body: JSON.stringify(newFeedback),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //related to the backend \n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => dispatch(addComment(response)))\n  .catch(error =>  { console.log('submmit feedback', error.message);\n   alert('Your feedback could not be submited\\nError: '+error.message); });\n};\n\nexport const addFeedback = (feedback) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: feedback\n});\n\n\n\n///////////comments////////////\n\n//since this is a punc, I need to add the dispatch. So, I'll send the function of a function\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n  const newComment = {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n  };\n  \n //previesdly the id and the date where added in comments.js\n  newComment.date = new Date().toISOString();\n  \n  return fetch(baseUrl + 'comments', {\n      method: \"POST\",\n      body: JSON.stringify(newComment),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //related to the backend \n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => dispatch(addComment(response)))\n  .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\n};\n\n\nexport const addComment = (comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\n\n\n\n//////////// LEADERS //////////////\n\nexport const fetchLeaders = () => (dispatch) => {\n  dispatch(leadersLoading(true));\n\n  return fetch(baseUrl + 'leaders')\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(leaders => dispatch(addLeaders(leaders)))\n  .catch(error => dispatch(leadersFailed(error.message)));\n\n}\n\n\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = ((errmess) => {\n  return({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess});\n});\n\nexport const addLeaders = (leaders) => {\n  //alert(\"action creator, leader: \"+ JSON.stringify(leaders))\n  return({\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n  });\n}\n\n/*\nexport const addLeaders = (leaders) => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\n*/\n\n//////////// DISHES //////////////\n\n\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishes')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n\n}\n\n\n//returning an action\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = ((errmess) => {\n    //alert(\"actionCreator.js - dishesFailed: \"+ errmess);\n    return({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess});\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n\n//////////// COMMENTS //////////////\n\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + 'comments')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n\n//////////// PROMOTIONS //////////////\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + 'promotions')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});"]},"metadata":{},"sourceType":"module"}