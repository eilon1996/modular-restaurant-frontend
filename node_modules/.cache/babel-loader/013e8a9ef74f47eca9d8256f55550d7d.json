{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = (dishId, rating, author, comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  }\n});\n/*\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishees', {\n    method: \"head\",\n    mode: \"no-cors\"\n    })\n    .then(status)\n    .then(res => res.json())\n    .catch(function(error) {\n        alert(\"Error\", error);\n    });\n\n    function status(response) {   \n        if (response.ok) {\n            return response;\n        }\n        return response.json().then(res => Promise.reject(res));\n    }\n}\n*/\n// this is the way to return a function\n\nexport const fetchDishes = () => dispatch => {\n  //dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishees').then(response => {\n    if (response.ok) {\n      alert(\"entered2\");\n      return response;\n    } else {\n      alert(\"entered3\");\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    alert(\"entered2\");\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => {\n    alert(\"entered5\");\n    return response.json();\n  }).then(dishes => dispatch(addDishes(dishes))).catch(error => {\n    alert(\"entered6\"); //dispatch(dishesLoading(false));\n\n    return \"error\"; //return dispatch(dishesFailed(error.message))\n  });\n}; //returning an action\n\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => {\n  alert(\"entered8\");\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: \"errmess\"\n  }; //payload: errmess\n};\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion2/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","dishId","rating","author","comment","type","ADD_COMMENT","payload","fetchDishes","dispatch","fetch","then","response","ok","alert","error","Error","status","statusText","errmess","message","json","dishes","addDishes","catch","dishesLoading","DISHES_LOADING","dishesFailed","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["\nimport * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const addComment = (dishId, rating, author, comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: {\n        dishId: dishId,\n        rating: rating,\n        author: author,\n        comment: comment\n    }\n});\n\n/*\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishees', {\n    method: \"head\",\n    mode: \"no-cors\"\n    })\n    .then(status)\n    .then(res => res.json())\n    .catch(function(error) {\n        alert(\"Error\", error);\n    });\n\n    function status(response) {   \n        if (response.ok) {\n            return response;\n        }\n        return response.json().then(res => Promise.reject(res));\n    }\n}\n*/\n\n// this is the way to return a function\n\nexport const fetchDishes = () => (dispatch) => {\n    //dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishees')\n    .then((response) => {\n        if (response.ok) {\n            alert(\"entered2\");\n          return response;\n        } else {\n            alert(\"entered3\");\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n      },\n      (error) => {\n          alert(\"entered2\");\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then((response) => {\n        alert(\"entered5\");\n        return response.json();\n    })\n    .then((dishes) => dispatch(addDishes(dishes)))\n    .catch((error) => {\n        alert(\"entered6\");\n        //dispatch(dishesLoading(false));\n        return \"error\";\n        //return dispatch(dishesFailed(error.message))\n    });\n}\n\n\n//returning an action\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = ((errmess) => {\n    alert(\"entered8\");\n    return({\n    type: ActionTypes.DISHES_FAILED,\n    payload: \"errmess\"});\n    //payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n\n\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + 'comments')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + 'promotions')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});"]},"metadata":{},"sourceType":"module"}