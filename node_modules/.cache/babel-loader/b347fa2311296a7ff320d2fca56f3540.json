{"ast":null,"code":"var _jsxFileName = \"/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/src/component/EditBoxComponent.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Label } from 'reactstrap'; //import '../App.css';\n\nimport initialContent from '../redux/initialContent';\n\nconst EditBox = props => {\n  const [text, setText] = useState(null);\n  const [edit, setEdit] = useState(false);\n  var placeHolder = \"\";\n  var type = \"text\";\n  var fontSize = \"20px\";\n  var myContent = null;\n\n  if (props.myContent === null) {\n    myContent = initialContent;\n  } else {\n    myContent = props.myContent;\n  } //var currentText = \"\"\n\n\n  console.log(\"EditBox: props.myContent\", JSON.stringify(props.myContent), \" props.feild_name: \", props.field_name); //switch (props.myContent !== null && props.field_name){\n\n  switch (props.field_name) {\n    case \"title\":\n      if (text === null) {\n        setText(props.myContent.title.text);\n      }\n\n      fontSize = props.myContent.title.fontSize;\n      placeHolder = \"restrunt name\";\n      break;\n\n    case \"description\":\n      if (text === null) {\n        setText(props.myContent.description.text);\n      }\n\n      fontSize = props.myContent.description.fontSize;\n      placeHolder = \"restrunt description\";\n      type = \"textarea\";\n\n    /*\n    case \"dish\":\n    if (text === null){\n        setText(props.dish.title);\n    }\n    fontSize = props.myContent.descriptionFontSize;\n    field_index = 4;\n    placeHolder=\"dish name\";\n     */\n  }\n\n  function handleChange(event) {\n    console.log(\"EditBox: event.value: \", event.target.value);\n    setText(event.target.value);\n    console.log(\"EditBox: text: \", text);\n  }\n\n  function handleSubmit(event) {\n    props.putContent(myContent.id, props.field_name, text);\n    setEdit(false);\n    event.preventDefault();\n  }\n\n  function handleOnClick() {\n    setEdit(true);\n  }\n\n  function handleFontSize(amount) {\n    const size = parseInt(fontSize.slice(0, fontSize.length - 2));\n\n    if (size < 8) {\n      alert(\"this is the minimum size\");\n      return;\n    }\n\n    if (size > 60) {\n      alert(\"this is the maximum size\");\n      return;\n    }\n\n    new_value = String(size + amount) + \"px\";\n    console.log(fields);\n    props.putContent(myContent.id, props.field_name, new_value);\n  }\n\n  if (edit) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        padding: \"10px\",\n        margin: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => handleSubmit(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      style: {\n        fontSize: fontSize\n      },\n      type: type,\n      value: text,\n      onChange: event => handleChange(event),\n      placeholder: placeHolder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"edit-save btn btn-secondary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, \"save\"))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        padding: \"10px\",\n        margin: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      style: {\n        fontSize: fontSize,\n        mb: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, text), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"edit-save btn btn-secondary\",\n      onClick: () => handleOnClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, \"edit\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"edit-save-arrow btn btn-secondary\",\n      onClick: () => handleFontSize(+2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"fa fa-angle-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"edit-save-arrow btn btn-secondary\",\n      onClick: () => handleFontSize(-2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"fa fa-angle-down\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    }))));\n  }\n};\n\nexport default EditBox;\n/*\nimport React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Modal, ModalBody, ModalHeader, Label, Col , Row } from 'reactstrap'\nimport { Control, Form, Errors, Input} from 'react-redux-form';\n\nclass EditBox extends Component{\n\n    constructor(props){\n        super (props)\n\n        this.state = {\n            edit: false,\n            text:this.props.text\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(values){\n        console.log(\"handleSubmit\", values)\n        this.props.putText(this.state.text, this.props.id, this.props.username);\n\n        this.setState({\n            edit: !this.state.edit\n        });\n    }\n\n\n    onClick(){\n\n        console.log(\"onClick\", this.state.edit)\n        this.setState({\n            edit: !this.state.edit\n        });\n    }\n\n    handleInputChange(event){\n            // This will update specific key in your form object inside the local state\n        this.setState({\n            form: Object.assign({}, this.state.form, {\n            [event.target.text]: event.target.value,\n        }),\n        });\n    }\n\n\n    render(){\n\n        \n\n        if(this.state.edit){\n\n            return( \n                <div>\n            <Form model=\"text\" onSubmit={(values) => this.handleSubmit(values)}>\n                <Control.textarea model=\".text\" id={this.props.id} name=\"text\" style = {{fontSize:\"35px\"}}\n                    rows={this.props.rows_num} \n                    className=\"form-control\"  \n                    onChange={event => this.handleInputChange(event)}\n                    defaultValue={this.props.text}/>\n\n                <Button type=\"submit\">save</Button>\n            </Form>\n\n            \n                </div>\n            );        \n            // onChange={this.handleInputChange}                   \n        }               \n        else{\n            return(\n            <div>\n                <div className = 'row'>\n                    <span style = {{fontSize:\"45px\", fontWeight:\"normal\"}}>{this.props.text} </span>\n                </div>\n                \n                <div className = 'row'>\n                    <Button onClick={()=>this.onClick()}>edit</Button>\n                </div>\n            </div>\n            );\n        }\n\n    }\n}\n\nexport default EditBox;\n\n*/","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/src/component/EditBoxComponent.js"],"names":["React","useState","useEffect","Form","Input","Button","Label","initialContent","EditBox","props","text","setText","edit","setEdit","placeHolder","type","fontSize","myContent","console","log","JSON","stringify","field_name","title","description","handleChange","event","target","value","handleSubmit","putContent","id","preventDefault","handleOnClick","handleFontSize","amount","size","parseInt","slice","length","alert","new_value","String","fields","padding","margin","mb"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Form, Input, Button, Label} from 'reactstrap';\n//import '../App.css';\nimport initialContent from '../redux/initialContent'\n\n\nconst EditBox = (props) => {\n\n    const [text, setText] = useState(null);\n    const [edit, setEdit] = useState(false);\n\n    var placeHolder=\"\";\n    var type = \"text\";\n    var fontSize = \"20px\"    \n    var myContent = null;\n\n    if(props.myContent === null){\n        myContent = initialContent;\n    } else{\n        myContent = props.myContent;\n    }\n    \n    //var currentText = \"\"\n    console.log(\"EditBox: props.myContent\", JSON.stringify(props.myContent), \" props.feild_name: \", props.field_name)\n    //switch (props.myContent !== null && props.field_name){\n    switch (props.field_name){\n        case \"title\":\n            if (text === null){\n                setText(props.myContent.title.text)\n            }\n            fontSize = props.myContent.title.fontSize;\n            placeHolder=\"restrunt name\";\n            break;\n\n        case \"description\":\n            if (text === null){\n                setText(props.myContent.description.text);\n            }\n            fontSize = props.myContent.description.fontSize;\n            placeHolder=\"restrunt description\";\n            type = \"textarea\";\n\n            /*\n        case \"dish\":\n            if (text === null){\n                setText(props.dish.title);\n            }\n            fontSize = props.myContent.descriptionFontSize;\n            field_index = 4;\n            placeHolder=\"dish name\";\n\n            */\n    }\n    \n    \n    function handleChange(event){        \n        console.log(\"EditBox: event.value: \", event.target.value);\n        setText(event.target.value);\n        console.log(\"EditBox: text: \", text);\n    }\n    \n  \n    function handleSubmit(event){\n        props.putContent(myContent.id, props.field_name, text);\n        setEdit(false)\n        event.preventDefault();\n    }\n    function handleOnClick(){\n        setEdit(true);\n    }\n    function handleFontSize(amount){\n        const size = parseInt(fontSize.slice(0, fontSize.length-2))\n        if(size < 8){\n            alert(\"this is the minimum size\");\n            return;\n        } if(size > 60){\n            alert(\"this is the maximum size\");\n            return;\n        } \n\n        new_value = String(size + amount) + \"px\";\n        console.log(fields);\n        props.putContent(myContent.id, props.field_name, new_value);\n    }\n\n    \n    if(edit){\n        return(\n            <div className=\"row\"  style={{ padding: \"10px\", margin:\"0px\"}}>\n                <div  className=\"col-12\" >\n                    <form onSubmit={(event)=> handleSubmit(event)}>\n                        <input  style={{fontSize:fontSize}} type={type} value={text} onChange={(event) => handleChange(event)}\n                            placeholder={placeHolder}/>\n                        <button className=\"edit-save btn btn-secondary\" type=\"submit\" >save</button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n    else{\n\n        return(\n                <div className=\"row\"  style={{ padding: \"10px\", margin:\"0px\"}}>\n                        <div  className=\"col-12\" style={{fontSize:fontSize, mb:0}}>{text}</div> \n                        <div  className=\"col-12\" >\n                            <button className=\"edit-save btn btn-secondary\" \n                                  onClick={()=>handleOnClick()}>edit</button>\n                            <button className=\"edit-save-arrow btn btn-secondary\" \n                                  onClick={()=>handleFontSize(+2)}>\n                                <span className=\"fa fa-angle-up\"></span>\n                            </button>\n                            <button className=\"edit-save-arrow btn btn-secondary\" \n                                    onClick={()=>handleFontSize(-2)}>\n                                <span className=\"fa fa-angle-down\"></span>\n                            </button>\n                        </div>\n                </div>\n        );\n    }\n\n}\n\nexport default EditBox;\n\n\n\n\n\n\n/*\nimport React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Modal, ModalBody, ModalHeader, Label, Col , Row } from 'reactstrap'\nimport { Control, Form, Errors, Input} from 'react-redux-form';\n\nclass EditBox extends Component{\n\n    constructor(props){\n        super (props)\n\n        this.state = {\n            edit: false,\n            text:this.props.text\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(values){\n        console.log(\"handleSubmit\", values)\n        this.props.putText(this.state.text, this.props.id, this.props.username);\n\n        this.setState({\n            edit: !this.state.edit\n        });\n    }\n\n\n    onClick(){\n\n        console.log(\"onClick\", this.state.edit)\n        this.setState({\n            edit: !this.state.edit\n        });\n    }\n\n    handleInputChange(event){\n            // This will update specific key in your form object inside the local state\n        this.setState({\n            form: Object.assign({}, this.state.form, {\n            [event.target.text]: event.target.value,\n        }),\n        });\n    }\n\n\n    render(){\n\n        \n\n        if(this.state.edit){\n\n            return( \n                <div>\n            <Form model=\"text\" onSubmit={(values) => this.handleSubmit(values)}>\n                <Control.textarea model=\".text\" id={this.props.id} name=\"text\" style = {{fontSize:\"35px\"}}\n                    rows={this.props.rows_num} \n                    className=\"form-control\"  \n                    onChange={event => this.handleInputChange(event)}\n                    defaultValue={this.props.text}/>\n\n                <Button type=\"submit\">save</Button>\n            </Form>\n\n            \n                </div>\n            );        \n            // onChange={this.handleInputChange}                   \n        }               \n        else{\n            return(\n            <div>\n                <div className = 'row'>\n                    <span style = {{fontSize:\"45px\", fontWeight:\"normal\"}}>{this.props.text} </span>\n                </div>\n                \n                <div className = 'row'>\n                    <Button onClick={()=>this.onClick()}>edit</Button>\n                </div>\n            </div>\n            );\n        }\n\n    }\n}\n\nexport default EditBox;\n\n*/"]},"metadata":{},"sourceType":"module"}