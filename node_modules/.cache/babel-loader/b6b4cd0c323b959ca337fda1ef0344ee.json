{"ast":null,"code":"var _jsxFileName = \"/home/eilon/programing/full-stack/React/confusion2/src/component/DishdetailComponent.js\";\n//the new comment is not added to the page\nimport React, { Component } from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem, Nav, NavItem, Button, Modal, ModalBody, ModalHeader, Label, Col, Row } from 'reactstrap';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = val => val && val.length;\n\nconst maxLength = len => val => !val || val.length <= len;\n\nconst minLength = len => val => !val || val.length >= len;\n\nclass DishDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    /*\n    ,           cut from state\n        author: '',\n        rating: 5,\n        comment: '',\n        touched: {\n            author: false\n        }\n    */\n    // necessary for using \"this\" in the callback\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  toggleModal() {\n    this.setState({\n      isModalOpen: !this.state.isModalOpen\n    });\n  }\n\n  handleSubmit(values) {\n    this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\n    alert(\"current state is: \" + JSON.stringify(values));\n    this.toggleModal();\n  }\n\n  render() {\n    const RenderDish = dish => {\n      return /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CardImg, {\n        width: \"100%\",\n        top: true,\n        src: dish.image,\n        alt: dish.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CardTitle, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }\n      }, dish.name), /*#__PURE__*/React.createElement(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      }, dish.description)));\n    };\n\n    const RenderComments = (comments, addComment, dishId) => {\n      const comments_text = comments.map(comment => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-unstyled\",\n          key: comment.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }\n        }, comment.comment, \" \", /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 43\n          }\n        }), \"--\", comment.author, \",\", new Intl.DateTimeFormat('en-US', {\n          year: 'numeric',\n          month: 'short',\n          day: '2-digit'\n        }).format(new Date(Date.parse(comment.date))))); //we use here in a script that translate date to readble date\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }\n      }, \"comments\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"list-gruop\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, comments_text)); //we use here in a script that translate date to readble date\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 41\n      }\n    }, \"Menu\")), /*#__PURE__*/React.createElement(BreadcrumbItem, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, this.props.dish.name)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, this.props.dish.name), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 col-md-5 m-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, RenderDish(this.props.dish)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 col-md-5 m-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, RenderComments(this.props.comments, this.props.addComment, this.props.dish.id), /*#__PURE__*/React.createElement(Nav, {\n      className: \"ml-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(NavItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      outline: true,\n      onClick: this.toggleModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"fa fa-pencil fa-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }\n    }), \" Submit Comment\"))))), /*#__PURE__*/React.createElement(Modal, {\n      outline: true,\n      isOpen: this.state.isModalOpen,\n      toggle: this.toggleModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggleModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, \"Submit Comment\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(LocalForm, {\n      onSubmit: values => this.handleSubmit(values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: {\n        size: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Control.select, {\n      model: \".rating\",\n      name: \"rating\",\n      value: this.props.rating,\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 41\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 41\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 41\n      }\n    }, \"3\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 41\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 41\n      }\n    }, \"1\")))), /*#__PURE__*/React.createElement(Row, {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"author\",\n      md: {\n        size: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }\n    }, \"Your Name\"), /*#__PURE__*/React.createElement(Col, {\n      md: {\n        size: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Control.text, {\n      model: \".author\",\n      id: \"author\",\n      name: \"author\",\n      placeholder: \"Your Name\",\n      className: \"form-control\",\n      onChange: this.handleInputChange,\n      validators: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(15)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Errors, {\n      className: \"text-danger\",\n      model: \".author\",\n      show: \"touched\",\n      messages: {\n        required: 'Requierd ',\n        minLength: 'Must be greater than 2 characters ',\n        maxLength: 'Must be 15 characters or less '\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"comment\",\n      md: {\n        size: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }, \"comment\"), /*#__PURE__*/React.createElement(Col, {\n      md: {\n        size: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Control.textarea, {\n      model: \".comment\",\n      id: \"comment\",\n      name: \"comment\",\n      rows: \"6\",\n      className: \"form-control\",\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: {\n        size: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 37\n      }\n    }, \"Submit\")))))));\n  }\n\n}\n\nexport default DishDetail;","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion2/src/component/DishdetailComponent.js"],"names":["React","Component","Card","CardImg","CardText","CardBody","CardTitle","Link","Breadcrumb","BreadcrumbItem","Nav","NavItem","Button","Modal","ModalBody","ModalHeader","Label","Col","Row","Control","LocalForm","Errors","required","val","length","maxLength","len","minLength","DishDetail","constructor","props","state","isModalOpen","handleSubmit","bind","toggleModal","setState","values","addComment","dishId","rating","author","comment","alert","JSON","stringify","render","RenderDish","dish","image","name","description","RenderComments","comments","comments_text","map","id","Intl","DateTimeFormat","year","month","day","format","Date","parse","date","size","handleInputChange"],"mappings":"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","sourcesContent":["//the new comment is not added to the page\n\nimport React, {Component} from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem,Nav, NavItem, Button, Modal, ModalBody, ModalHeader, Label, Col , Row } from 'reactstrap'\nimport { Control, LocalForm, Errors} from 'react-redux-form';\n\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => val => !(val) || (val.length <= len)\nconst minLength = (len) => val => !(val) || (val.length >= len)\n\nclass DishDetail extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            isModalOpen: false\n        }\n        /*\n,           cut from state\n            author: '',\n            rating: 5,\n            comment: '',\n            touched: {\n                author: false\n            }\n        */\n        // necessary for using \"this\" in the callback\n        \n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n     }\n\n    toggleModal() {\n        this.setState({ isModalOpen: !this.state.isModalOpen });\n    }\n\n\n    handleSubmit(values){\n        this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\n        alert(\"current state is: \" + JSON.stringify(values));\n        this.toggleModal();\n    }\n\n\n    render(){\n\n        const RenderDish = (dish) => {\n            return(\n                <Card>\n                    <CardImg width=\"100%\" top src={dish.image} alt={dish.name} />\n                    <CardBody>\n                        <CardTitle>{dish.name}</CardTitle>\n                        <CardText>{dish.description}</CardText>\n                    </CardBody>\n                </Card>\n            );\n        }\n\n        const RenderComments = (comments, addComment, dishId) => {\n            const comments_text = comments.map((comment)=>{\n                return (\n                    <li className=\"list-unstyled\" key={comment.id}>\n                    <p>\n                        {comment.comment} <br/>\n                        --{comment.author},\n                        {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'})\n                            .format(new Date(Date.parse(comment.date)))}\n                    </p>\n                    </li>\n                );\n                //we use here in a script that translate date to readble date\n            });\n    \n            return(\n                <div className=\"container\">\n                    <h4>comments</h4>\n                    <ul className=\"list-gruop\">\n                        {comments_text}\n                    </ul>\n                </div>\n            )\n            //we use here in a script that translate date to readble date\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Breadcrumb>\n                        <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>{this.props.dish.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                    <div className=\"col-12\">\n                        <h3>{this.props.dish.name}</h3>\n                        <hr />\n                    </div>                \n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-5 m-1\">\n                        {RenderDish(this.props.dish)}\n                    </div>\n                    <div className=\"col-12 col-md-5 m-1\">\n                        {RenderComments(this.props.comments, this.props.addComment, this.props.dish.id)}\n\n                    <Nav className='ml-auto'>\n                        <NavItem>\n                            <Button outline onClick={this.toggleModal}>\n                                <span className='fa fa-pencil fa-lg'></span> Submit Comment\n                            </Button>\n                        </NavItem>\n                    </Nav>\n                    </div>\n                </div>\n                <Modal outline isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\n                    <ModalBody>\n\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                            \n                            <Row className=\"form-group\">\n                                <Col md={{ size: 12 }}>\n                                    <Control.select model=\".rating\" name=\"rating\"\n                                            value={this.props.rating} onChange={this.handleInputChange}>\n                                        <option>5</option>\n                                        <option>4</option>\n                                        <option>3</option>\n                                        <option>2</option>\n                                        <option>1</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"author\" md={{ size: 12 }}>Your Name</Label>\n                                <Col md={{ size: 12 }}>\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Your Name\" \n                                        className=\"form-control\" onChange={this.handleInputChange}\n                                        validators={{required, minLength:minLength(3), maxLength:maxLength(15)}}\n                                        />\n                                    <Errors className=\"text-danger\" model=\".author\"\n                                    show=\"touched\" \n                                    messages={{\n                                            required: 'Requierd ',\n                                            minLength: 'Must be greater than 2 characters ',\n                                            maxLength: 'Must be 15 characters or less '\n                                    }}>\n                                    </Errors>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"comment\" md={{ size: 12 }}>comment</Label>\n                                <Col md={{ size: 12 }}> \n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\n                                        rows=\"6\" className=\"form-control\"  onChange={this.handleInputChange}/>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{ size: 12 }}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                        Submit\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </LocalForm>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\n    \nexport default DishDetail;"]},"metadata":{},"sourceType":"module"}