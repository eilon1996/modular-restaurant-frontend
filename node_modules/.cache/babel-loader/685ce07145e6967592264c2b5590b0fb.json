{"ast":null,"code":"var _jsxFileName = \"/home/eilon/programing/full-stack/React/confusion2/src/component/DishdetailComponent.js\";\nimport React from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle } from 'reactstrap';\n\nfunction RenderDish({\n  selectedDish\n}) {\n  if (selectedDish != null) {\n    return /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardImg, {\n      width: \"100%\",\n      top: true,\n      src: selectedDish.image,\n      alt: selectedDish.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 25\n      }\n    }, selectedDish.name), /*#__PURE__*/React.createElement(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 25\n      }\n    }, selectedDish.description)));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    });\n  }\n} //when sending var to function you should wrap it with {} un-like in render\n\n\nfunction RenderComments({\n  selectedDish\n}) {\n  if (selectedDish != null) {\n    const comments = selectedDish.comments.map(comment => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: \"list-unstyled\",\n        key: comment.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }\n      }, comment.comment, \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 39\n        }\n      }), \"--\", comment.author, \",\", new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit'\n      }).format(new Date(Date.parse(comment.date))))); //we use here in a script that translate date to readble date\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }, \"comments\"), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"list-gruop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    }, comments));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    });\n  }\n}\n\nconst DishDetail = props => {\n  console.log('componentDidUpdate in render'); // dish.props allow you to get to a field in another component\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    key: \"selectedDish\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12 col-md-5 m-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(RenderDish, {\n    selectedDish: props.selectedDish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12 col-md-5 m-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(RenderComments, {\n    selectedDish: props.selectedDish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  })));\n};\n\nexport default DishDetail;","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion2/src/component/DishdetailComponent.js"],"names":["React","Card","CardImg","CardText","CardBody","CardTitle","RenderDish","selectedDish","image","name","description","RenderComments","comments","map","comment","id","author","Intl","DateTimeFormat","year","month","day","format","Date","parse","date","DishDetail","props","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle} from 'reactstrap';\r\n\r\n\r\n\r\n    function RenderDish({selectedDish}) {\r\n        if(selectedDish != null){\r\n            return(\r\n                <Card>\r\n                    <CardImg width=\"100%\" top src={selectedDish.image} alt={selectedDish.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{selectedDish.name}</CardTitle>\r\n                        <CardText>{selectedDish.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            );\r\n        } else{\r\n            return(\r\n                <div></div>\r\n            );\r\n        }\r\n\r\n    }\r\n    //when sending var to function you should wrap it with {} un-like in render\r\n    function RenderComments({selectedDish}){\r\n        \r\n        if(selectedDish != null ){\r\n            const comments = selectedDish.comments.map((comment)=>{\r\n            return (\r\n                <li className=\"list-unstyled\" key={comment.id}>\r\n                <p>\r\n                    {comment.comment} <br/>\r\n                    --{comment.author},\r\n                    {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'})\r\n                        .format(new Date(Date.parse(comment.date)))}\r\n                </p>\r\n                </li>\r\n            );\r\n            //we use here in a script that translate date to readble date\r\n        });\r\n\r\n            return(\r\n                <div className=\"container\">\r\n                    <h4>comments</h4>\r\n                    <ul className=\"list-gruop\">\r\n                        {comments}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        } else{\r\n            return(\r\n                <div></div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const DishDetail = (props) => {\r\n        \r\n        console.log('componentDidUpdate in render')\r\n      // dish.props allow you to get to a field in another component\r\n        return (\r\n            <div className=\"row\" key=\"selectedDish\">\r\n                <div  className=\"col-12 col-md-5 m-1\">\r\n                    <RenderDish selectedDish = {props.selectedDish}/>\r\n                </div>\r\n                <div  className=\"col-12 col-md-5 m-1\">\r\n                    <RenderComments selectedDish = {props.selectedDish}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n    export default DishDetail;"]},"metadata":{},"sourceType":"module"}