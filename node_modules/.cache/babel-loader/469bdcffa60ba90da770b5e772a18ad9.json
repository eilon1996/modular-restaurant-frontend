{"ast":null,"code":"import * as ActyonTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActyonTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorm = new Error(error.message);\n    throw errorm;\n  }).then(response => response.json(response)).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActyonTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActyonTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActyonTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorm = new Error(error.message);\n    throw errorm;\n  }).then(response => response.json(response)).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActyonTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = dishes => ({\n  type: ActyonTypes.ADD_COMMENTS,\n  payload: dishes\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorm = new Error(error.message);\n    throw errorm;\n  }).then(response => response.json(response)).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActyonTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActyonTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActyonTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const postFeedback = Feedback => dispatch => {\n  const newFeedback = {\n    firstname: Feedback.firstname,\n    lastname: Feedback.lastname,\n    telnum: Feedback.telnum,\n    email: Feedback.email,\n    agree: Feedback.agree,\n    contactType: Feedback.contactType,\n    message: Feedback.message\n  };\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    console.log('Current State is: ' + JSON.stringify(response));\n    alert('Current State is: ' + JSON.stringify(response));\n  }).catch(error => {\n    console.log('post feedback', error.message);\n    alert('Your feedback could not be saved\\nError: ' + error.message);\n  });\n};\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorm = new Error(error.message);\n    throw errorm;\n  }).then(response => response.json(response)).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActyonTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActyonTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActyonTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion2/src/redux/ActionCreators.js"],"names":["ActyonTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","fetchDishes","dishesLoading","errorm","dishes","addDishes","dishesFailed","DISHES_LOADING","errmess","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","postFeedback","Feedback","newFeedback","firstname","lastname","telnum","email","agree","contactType","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActyonTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const addComment = (comment) => ({\n    type: ActyonTypes.ADD_COMMENT,\n    payload: comment\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n    const newComment = {\n        dishId: dishId,\n        rating: rating,\n        author: author,\n        comment: comment\n    };\n    newComment.date = new Date().toISOString();\n    \n    return fetch(baseUrl + 'comments', {\n        method: \"POST\",\n        body: JSON.stringify(newComment),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\n};\n\n\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishes')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errorm = new Error(error.message);\n            throw errorm;\n        })\n        .then(response => response.json(response),)\n        .then(dishes => dispatch(addDishes(dishes)))\n        .catch(error => dispatch(dishesFailed(error.message)));\n}\n\nexport const dishesLoading = () => ({\n    type: ActyonTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = (errmess) => ({\n    type: ActyonTypes.DISHES_FAILED,\n    payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActyonTypes.ADD_DISHES,\n    payload: dishes\n});\n\nexport const fetchComments = () => (dispatch) => {\n    return fetch(baseUrl + 'comments')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errorm = new Error(error.message);\n            throw errorm;\n        })\n        .then(response => response.json(response))\n        .then(comments => dispatch(addComments(comments)))\n        .catch(error => dispatch(commentsFailed(error.message)));\n}\n\nexport const commentsFailed = (errmess) => ({\n    type: ActyonTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (dishes) => ({\n    type: ActyonTypes.ADD_COMMENTS,\n    payload: dishes\n});\n\nexport const fetchPromos = () => (dispatch) => {\n    dispatch(promosLoading(true));\n\n    return fetch(baseUrl + 'promotions')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errorm = new Error(error.message);\n            throw errorm;\n        })\n        .then(response => response.json(response))\n        .then(promos => dispatch(addPromos(promos)))\n        .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActyonTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActyonTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActyonTypes.ADD_PROMOS,\n    payload: promos\n});\n\nexport const postFeedback = (Feedback) => (dispatch) => {\n\n    const newFeedback = {\n        firstname: Feedback.firstname,\n        lastname: Feedback.lastname,\n        telnum: Feedback.telnum,\n        email: Feedback.email,\n        agree: Feedback.agree,\n        contactType: Feedback.contactType,\n        message: Feedback.message\n    };\n    newFeedback.date = new Date().toISOString();\n    \n    return fetch(baseUrl + 'feedback', {\n        method: \"POST\",\n        body: JSON.stringify(newFeedback),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => {\n        console.log('Current State is: ' + JSON.stringify(response));\n        alert('Current State is: ' + JSON.stringify(response));\n    })\n    .catch(error =>  { console.log('post feedback', error.message); alert('Your feedback could not be saved\\nError: '+error.message); });\n};\n\nexport const fetchLeaders = () => (dispatch) => {\n    dispatch(leadersLoading(true));\n\n    return fetch(baseUrl + 'leaders')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errorm = new Error(error.message);\n            throw errorm;\n        })\n        .then(response => response.json(response))\n        .then(leaders => dispatch(addLeaders(leaders)))\n        .catch(error => dispatch(leadersFailed(error.message)));\n}\n\nexport const leadersLoading = () => ({\n    type: ActyonTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n    type: ActyonTypes.LEADERS_FAILED,\n    payload: errmess\n});\n\nexport const addLeaders = (leaders) => ({\n    type: ActyonTypes.ADD_LEADERS,\n    payload: leaders\n});"]},"metadata":{},"sourceType":"module"}