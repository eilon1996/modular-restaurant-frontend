{"ast":null,"code":"var _jsxFileName = \"/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/src/component/EditBoxComponent.js\";\nimport React, { useState } from 'react';\nimport Loading from './LoadingComponent';\n\nconst EditBox = props => {\n  const [text, setText] = useState(null);\n  const [edit, setEdit] = useState(false);\n  var placeHolder = \"\";\n  var input = null;\n  var fontSize = \"20px\"; //props.field   head/dish/\n  //props.id      0/1/2..\n  //props.type    title/description\n\n  if (props.myContent === null || props.myContent === undefined) {\n    return /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 16\n      }\n    });\n  }\n\n  setText(props.object.text);\n  fontSize = props.object.fontSize;\n  placeHolder = props.field + \" \" + props.type;\n  /*\n  setText(props.myContent[props.field][props.id][props.type].text);\n  fontSize = props.myContent[props.field][props.id][props.type].fontSize;\n  placeHolder=props.field + \" \" + props.type;\n  */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  }, \"edit box\");\n  if (props.type === \"title\") console.log(\"EditBox type=title\"); //input = <input style={{fontSize:fontSize}} type={props.type} onChange={(event) => handleChange(event)} placeholder={placeHolder}/>\n  else console.log(\"EditBox type=description\"); //input = <textarea style={{fontSize:fontSize}} type={props.type} onChange={(event) => handleChange(event)} placeholder={placeHolder}/>\n\n  function handleChange(event) {\n    console.log(\"EditBox: event.value: \", event.target.value);\n    setText(event.target.value);\n    console.log(\"EditBox: text: \", text);\n  }\n  /*\n     function handleSubmit(event){\n      props.myContent[props.field][props.id][props.type].text = text;\n      props.putContent(props.myContent);\n      setEdit(false)\n      event.preventDefault();\n  }\n    function handleOnClick(){\n      setEdit(true);\n  }\n    function handleFontSize(amount){\n      const size = parseInt(fontSize.slice(0, fontSize.length-2))\n      if(size < 8)\n          alert(\"this is the minimum size\");\n      else if(size > 60)\n          alert(\"this is the maximum size\");\n      else{\n          const new_size = String(size + amount) + \"px\";\n          props.myContent[props.field][props.id][props.type].fontSize = new_size;\n          props.putContent(props.myContent);\n      }\n  }\n   \n  if(edit){\n      return(\n          <div className=\"row\"  style={{ padding: \"10px\", margin:\"0px\"}}>\n              <div  className=\"col-12\" >\n                  <form onSubmit={(event)=> handleSubmit(event)}>\n                      {input}\n                      <button className=\"edit-save btn btn-secondary\" type=\"submit\" >save</button>\n                  </form>\n              </div>\n          </div>\n      );\n  }\n  else{\n       return(\n              <div className=\"row\"  style={{ padding: \"10px\", margin:\"0px\"}}>\n                      <div  className=\"col-12\" style={{fontSize:fontSize, mb:0}}>{text}</div> \n                      <div  className=\"col-12\" >\n                          <button className=\"edit-save btn btn-secondary\" \n                                onClick={()=>handleOnClick()}>edit</button>\n                          <button className=\"edit-save-arrow btn btn-secondary\" \n                                onClick={()=>handleFontSize(+2)}>\n                              <span className=\"fa fa-angle-up\"></span>\n                          </button>\n                          <button className=\"edit-save-arrow btn btn-secondary\" \n                                  onClick={()=>handleFontSize(-2)}>\n                              <span className=\"fa fa-angle-down\"></span>\n                          </button>\n                      </div>\n              </div>\n      );\n  }\n  */\n\n};\n\nexport default EditBox;","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/src/component/EditBoxComponent.js"],"names":["React","useState","Loading","EditBox","props","text","setText","edit","setEdit","placeHolder","input","fontSize","myContent","undefined","object","field","type","console","log","handleChange","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAqB,oBAArB;;AAGA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AAEA,MAAIQ,WAAW,GAAC,EAAhB;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,QAAQ,GAAG,MAAf,CAPuB,CASvB;AACA;AACA;;AAGA,MAAGP,KAAK,CAACQ,SAAN,KAAoB,IAApB,IAA4BR,KAAK,CAACQ,SAAN,KAAoBC,SAAnD,EAA6D;AACzD,wBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAEDP,EAAAA,OAAO,CAACF,KAAK,CAACU,MAAN,CAAaT,IAAd,CAAP;AACAM,EAAAA,QAAQ,GAAGP,KAAK,CAACU,MAAN,CAAaH,QAAxB;AACAF,EAAAA,WAAW,GAACL,KAAK,CAACW,KAAN,GAAc,GAAd,GAAoBX,KAAK,CAACY,IAAtC;AACA;;;;;;AAMD,sBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAN;AAEC,MAAGZ,KAAK,CAACY,IAAN,KAAe,OAAlB,EACIC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADJ,CAEI;AAFJ,OAKID,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAlCmB,CAmCnB;;AAIJ,WAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACxBH,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCE,KAAK,CAACC,MAAN,CAAaC,KAAnD;AACAhB,IAAAA,OAAO,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bb,IAA/B;AACH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DH,CA3GD;;AA4GA,eAAeF,OAAf","sourcesContent":["import React, {useState} from 'react';\nimport Loading  from './LoadingComponent'\n\n\nconst EditBox = (props) => {\n\n    const [text, setText] = useState(null);\n    const [edit, setEdit] = useState(false);\n\n    var placeHolder=\"\";  \n    var input = null;\n    var fontSize = \"20px\"    \n\n    //props.field   head/dish/\n    //props.id      0/1/2..\n    //props.type    title/description\n\n\n    if(props.myContent === null || props.myContent === undefined){\n        return <Loading/>\n    } \n    \n    setText(props.object.text);\n    fontSize = props.object.fontSize;\n    placeHolder=props.field + \" \" + props.type;\n    /*\n    setText(props.myContent[props.field][props.id][props.type].text);\n    fontSize = props.myContent[props.field][props.id][props.type].fontSize;\n    placeHolder=props.field + \" \" + props.type;\n    */\n\n   return<div>edit box</div>\n\n    if(props.type === \"title\")\n        console.log(\"EditBox type=title\");\n        //input = <input style={{fontSize:fontSize}} type={props.type} onChange={(event) => handleChange(event)} placeholder={placeHolder}/>\n    \n    else \n        console.log(\"EditBox type=description\");\n        //input = <textarea style={{fontSize:fontSize}} type={props.type} onChange={(event) => handleChange(event)} placeholder={placeHolder}/>\n\n    \n    \n    function handleChange(event){        \n        console.log(\"EditBox: event.value: \", event.target.value);\n        setText(event.target.value);\n        console.log(\"EditBox: text: \", text);\n    }\n    /*\n  \n    function handleSubmit(event){\n        props.myContent[props.field][props.id][props.type].text = text;\n        props.putContent(props.myContent);\n        setEdit(false)\n        event.preventDefault();\n    }\n\n\n    function handleOnClick(){\n        setEdit(true);\n    }\n\n\n    function handleFontSize(amount){\n        const size = parseInt(fontSize.slice(0, fontSize.length-2))\n        if(size < 8)\n            alert(\"this is the minimum size\");\n        else if(size > 60)\n            alert(\"this is the maximum size\");\n        else{\n            const new_size = String(size + amount) + \"px\";\n            props.myContent[props.field][props.id][props.type].fontSize = new_size;\n            props.putContent(props.myContent);\n        }\n    }\n\n    \n    if(edit){\n        return(\n            <div className=\"row\"  style={{ padding: \"10px\", margin:\"0px\"}}>\n                <div  className=\"col-12\" >\n                    <form onSubmit={(event)=> handleSubmit(event)}>\n                        {input}\n                        <button className=\"edit-save btn btn-secondary\" type=\"submit\" >save</button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n    else{\n\n        return(\n                <div className=\"row\"  style={{ padding: \"10px\", margin:\"0px\"}}>\n                        <div  className=\"col-12\" style={{fontSize:fontSize, mb:0}}>{text}</div> \n                        <div  className=\"col-12\" >\n                            <button className=\"edit-save btn btn-secondary\" \n                                  onClick={()=>handleOnClick()}>edit</button>\n                            <button className=\"edit-save-arrow btn btn-secondary\" \n                                  onClick={()=>handleFontSize(+2)}>\n                                <span className=\"fa fa-angle-up\"></span>\n                            </button>\n                            <button className=\"edit-save-arrow btn btn-secondary\" \n                                    onClick={()=>handleFontSize(-2)}>\n                                <span className=\"fa fa-angle-down\"></span>\n                            </button>\n                        </div>\n                </div>\n        );\n    }\n\n*/\n}\nexport default EditBox;\n"]},"metadata":{},"sourceType":"module"}