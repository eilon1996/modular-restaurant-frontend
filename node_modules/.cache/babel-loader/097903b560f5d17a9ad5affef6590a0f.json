{"ast":null,"code":"import _objectSpread from\"/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import*as ActionTypes from'./ActionTypes';export var Leaders=function Leaders(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{isLoading:true,errMess:null,leaders:[]};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ActionTypes.ADD_LEADERS://alert(\"action creator, leader: \"+ JSON.stringify(action.payload))\nreturn _objectSpread(_objectSpread({},state),{},{isLoading:false,errMess:null,leaders:action.payload});case ActionTypes.LEADERS_LOADING:return _objectSpread(_objectSpread({},state),{},{isLoading:true,errMess:null,leaders:[]});case ActionTypes.LEADERS_FAILED:return _objectSpread(_objectSpread({},state),{},{isLoading:false,errMess:action.payload,leaders:[]});default:return state;}};","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/src/redux/leaders.js"],"names":["ActionTypes","Leaders","state","isLoading","errMess","leaders","action","type","ADD_LEADERS","payload","LEADERS_LOADING","LEADERS_FAILED"],"mappings":"+LAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAIuB,IAJtBC,CAAAA,KAIsB,2DAJd,CACJC,SAAS,CAAC,IADN,CAEJC,OAAO,CAAE,IAFL,CAGJC,OAAO,CAAE,EAHL,CAIc,IAAXC,CAAAA,MAAW,2CAC1C,OAAQA,MAAM,CAACC,IAAf,EACQ,IAAKP,CAAAA,WAAW,CAACQ,WAAjB,CAEI;AACA,sCAAWN,KAAX,MAAkBC,SAAS,CAAC,KAA5B,CAAmCC,OAAO,CAAC,IAA3C,CAAiDC,OAAO,CAAEC,MAAM,CAACG,OAAjE,GAEJ,IAAKT,CAAAA,WAAW,CAACU,eAAjB,CACI,sCAAWR,KAAX,MAAkBC,SAAS,CAAC,IAA5B,CAAkCC,OAAO,CAAC,IAA1C,CAAgDC,OAAO,CAAC,EAAxD,GAEJ,IAAKL,CAAAA,WAAW,CAACW,cAAjB,CACI,sCAAWT,KAAX,MAAkBC,SAAS,CAAC,KAA5B,CAAmCC,OAAO,CAAEE,MAAM,CAACG,OAAnD,CAA4DJ,OAAO,CAAE,EAArE,GAEJ,QACI,MAAOH,CAAAA,KAAP,CAbZ,CAeH,CApBM","sourcesContent":["import * as ActionTypes from './ActionTypes';\n\nexport const Leaders = (state = {\n                            isLoading:true, \n                            errMess: null,\n                            leaders: []\n                                }, action) => {\n    switch (action.type) {\n            case ActionTypes.ADD_LEADERS:\n\n                //alert(\"action creator, leader: \"+ JSON.stringify(action.payload))\n                return {...state, isLoading:false, errMess:null, leaders: action.payload}\n            \n            case ActionTypes.LEADERS_LOADING:\n                return {...state, isLoading:true, errMess:null, leaders:[]}\n\n            case ActionTypes.LEADERS_FAILED:\n                return {...state, isLoading:false, errMess: action.payload, leaders: []}\n          \n            default:\n                return state;\n      }\n};"]},"metadata":{},"sourceType":"module"}