{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n/*\nexport const postComment = (dishId, rating, author, comment) => fetch(\"comments\", \"\", \"POST\", {\n\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment,\n      date:new Date().toISOString()\n  })\n\n////// feedback //////\n\nexport const postFeedback = ( firstName, lastName, telNum, email, agree, contactType, message) => fetch(\"comments\", \"\", \"POST\", {\n    firstName: firstName,\n    lastName: lastName,\n    telNum: telNum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message,\n    date:new Date().toISOString()\n  })\n\n////////////  signup  ////////////\n\nexport const signup = (fields_value) => fetch(\"content\", fields_value[0], \"POST\", {\n  id:fields_value[0],\n  password:fields_value[1],\n  title: fields_value[2],\n  titleFontSize: fields_value[3],\n  description: fields_value[4],\n  descriptionFontSize: fields_value[5],\n  color: fields_value[6],\n  dishes: fields_value[7]\n})\n\n\n///////////putContnet///////////\n\nexport const putContent = (fields_value) => fetch(\"myContent\", fields_value[0], \"PUT\", {\n  id:fields_value[0],\n  password:fields_value[1],\n  title: fields_value[2],\n  titleFontSize: fields_value[3],\n  description: fields_value[4],\n  descriptionFontSize: fields_value[5],\n  color: fields_value[6],\n  dishes: fields_value[7]\n})\n*/\n////////FETCH //////////////\n\nexport const fetchMyContent = id => fetch(\"myContent\", id, \"GET\", null);\nexport const fetchContent = () => fetch(\"content\", \"\", \"GET\", null);\nexport const fetchDishes = () => fetch(\"dishes\", \"\", \"GET\", null);\nexport const fetchLeaders = () => fetch(\"leaders\", \"\", \"GET\", null);\nexport const fetchPromos = () => fetch(\"promotions\", \"\", \"GET\", null);\nexport const fetchComments = () => fetch(\"comments\", \"\", \"GET\", null); ////// ACTION GENERATOR /////\n\nexport const fetch = (type, id, method, newJson) => dispatch => {\n  /*\n  , {\n    method: method,\n    body: JSON.stringify(newJson),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }*/\n  //if(method === \"GET\") dispatch(loading(type));\n  if (type === \"myContent\" && id === null) {\n    id = \"0\";\n  }\n\n  return fetch(baseUrl + '/' + type + '/' + id + \".json\").then(response => {\n    if (response.ok) {\n      console.log(\"ActionCreator-fetch \" + type + id + \", response is OK\\nresponse: \", response);\n      return response;\n    } else {\n      console.log(\"ActionCreator-fetchmyContent, response is NOT OK\\nresponse: \", response);\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    console.log(\"ActionCreator-fetchmyContent, NO response \\error.message: \", error.message);\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(values => dispatch(add(values, type))).catch(error => dispatch(failed(error.message)));\n};\nexport const loading = type => {\n  console.log(\"ActionCreator-loading type: \", type);\n  var actionType = null;\n\n  switch (type) {\n    case \"myContent\":\n      actionType = ActionTypes.MYCONTENT_LOADING;\n      break;\n\n    case \"dishes\":\n      actionType = ActionTypes.DISHES_LOADING;\n      break;\n\n    case \"leaders\":\n      actionType = ActionTypes.LEADERS_LOADING;\n      break;\n\n    case \"promotions\":\n      actionType = ActionTypes.PROMOS_LOADING;\n      break;\n  }\n\n  return {\n    type: actionType\n  };\n};\nexport const failed = (errmess, type) => {\n  console.log(\"ActionCreator-failed, errmess: \", errmess, \" type: \", type);\n  var actionType = null;\n\n  switch (type) {\n    case \"myContent\":\n      actionType = ActionTypes.MYCONTENT_FAILED;\n      break;\n\n    case \"content\":\n      actionType = ActionTypes.CONTENT_FAILED;\n      break;\n\n    case \"dishes\":\n      actionType = ActionTypes.DISHES_FAILED;\n      break;\n\n    case \"leaders\":\n      actionType = ActionTypes.LEADERS_FAILED;\n      break;\n\n    case \"promotions\":\n      actionType = ActionTypes.PROMOS_FAILED;\n      break;\n\n    case \"comments\":\n      actionType = ActionTypes.COMMENTS_FAILED;\n      break;\n  }\n\n  return {\n    type: actionType,\n    payload: errmess\n  };\n};\nexport const add = (values, type) => {\n  console.log(\"ActionCreator-add, values: \", values, \" type: \", type);\n  var actionType = null;\n\n  switch (type) {\n    case \"myContent\":\n      actionType = ActionTypes.ADD_MYCONTENT;\n      break;\n\n    case \"content\":\n      actionType = ActionTypes.ADD_CONTENT;\n      break;\n\n    case \"dishes\":\n      actionType = ActionTypes.ADD_DISHES;\n      break;\n\n    case \"leaders\":\n      actionType = ActionTypes.ADD_LEADERS;\n      break;\n\n    case \"comments\":\n      actionType = ActionTypes.ADD_COMMENTS;\n      break;\n  }\n\n  return {\n    type: actionType,\n    payload: values\n  };\n}; ////////////  signup  ////////////\n\nexport const signup = fields_value => dispatch => {\n  console.log(\"signup\");\n  const newContent = {\n    id: fields_value[0],\n    password: fields_value[1],\n    title: fields_value[2],\n    titleFontSize: fields_value[3],\n    description: fields_value[4],\n    descriptionFontSize: fields_value[5],\n    color: fields_value[6],\n    dishes: fields_value[7]\n  };\n  return fetch(baseUrl + '/content.json', {\n    method: \"POST\",\n    body: JSON.stringify(newContent),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    dispatch(addContent(response));\n    alert('Your content was submited successfully');\n  }).catch(error => {\n    console.log('submmit content', error.message);\n    alert('Your content could not be submited\\nError: ' + error.message);\n  });\n}; ///////////putContnet///////////\n\nexport const putContent = fields_value => dispatch => {\n  console.log(\"ActionCreator-putcontent\");\n  const newContent = {\n    id: fields_value[0],\n    password: fields_value[1],\n    title: fields_value[2],\n    titleFontSize: fields_value[3],\n    description: fields_value[4],\n    descriptionFontSize: fields_value[5],\n    color: fields_value[6],\n    dishes: fields_value[7]\n  };\n  return fetch(baseUrl + '/content/' + fields_value[0] + \".json\", {\n    method: \"PATCH\",\n    body: JSON.stringify(newContent),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    //dispatch(addContent(response));\n    dispatch(addMyContent(response)); //alert('Your content was submited successfully');\n  }).catch(error => {\n    console.log('submmit content', error.message);\n    alert('Your content could not be submited\\nError: ' + error.message);\n  });\n}; ///////////feedback///////////\n\nexport const postFeedback = (firstName, lastName, telNum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstName: firstName,\n    lastName: lastName,\n    telNum: telNum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  }; //previesdly the id and the date where added in comments.js\n\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + '/feedback' + \".json\", {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    //related to the backend \n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    dispatch(addFeedback(response));\n    alert('Your feedback was submited successfully');\n  }).catch(error => {\n    console.log('submmit feedback', error.message);\n    alert('Your feedback could not be submited\\nError: ' + error.message);\n  });\n};\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: feedback\n}); ///////////comments////////////\n//since this is a punc, I need to add the dispatch. So, I'll send the function of a function\n\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  }; //previesdly the id and the date where added in comments.js\n\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + '/comments' + \".json\", {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    //related to the backend \n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const addMyContent = myContent => {\n  console.log(\"ActionCreator-addContent, content: \", myContent);\n  return {\n    type: ActionTypes.ADD_MYCONTENT,\n    payload: myContent\n  };\n};\nexport const contentLoading = () => {\n  console.log(\"ActionCreator-contentLoading\");\n  return {\n    type: ActionTypes.CONTENT_LOADING\n  };\n};\nexport const contentFailed = errmess => {\n  return {\n    type: ActionTypes.CONTENT_FAILED,\n    payload: errmess\n  };\n};\nexport const addContent = content => {\n  console.log(\"ActionCreator-addContent, content: \", content);\n  return {\n    type: ActionTypes.ADD_CONTENT,\n    payload: content\n  };\n};\n/*\n\n\n/// fetch myContent////\n\nexport const fetchMyContent = (id) => (dispatch) => {\n\n  dispatch(myContentLoading(true));\n\n  if(id === null){\n    id = \"0\";\n  }\n  return fetch(baseUrl + '/content/'+id+\".json\")\n  .then(response => {\n      if (response.ok) {\n        console.log(\"ActionCreator-fetchmyContent, response is OK\\nresponse: \", response);        \n        return response;\n      } else {\n        console.log(\"ActionCreator-fetchmyContent, response is NOT OK\\nresponse: \", response);   \n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n      console.log(\"ActionCreator-fetchmyContent, NO response \\error.message: \", error.message); \n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(myContent => dispatch(addMyContent(myContent)))\n  .catch(error => dispatch(myContentFailed(error.message)));\n\n}\n\nexport const myContentLoading = () => {\n  console.log(\"ActionCreator-contentLoading\");\n  return{\n  type: ActionTypes.MYCONTENT_LOADING\n}}\n\nexport const myContentFailed = ((errmess) => {\n  return({\n  type: ActionTypes.MYCONTENT_FAILED,\n  payload: errmess});\n});\n\n\n\n\n/// fetch content////\n\nexport const fetchContent = () => (dispatch) => {\n\n  dispatch(contentLoading(true));\n\n  return fetch(baseUrl + '/content'+\".json\")\n  .then(response => {\n      if (response.ok) {\n        console.log(\"ActionCreator-fetchContent, response is OK\\nresponse: \", response);        \n        return response;\n      } else {\n        console.log(\"ActionCreator-fetchContent, response is NOT OK\\nresponse: \", response);   \n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n      console.log(\"ActionCreator-fetchContent, NO response \\error.message: \", error.message); \n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(content => dispatch(addContent(content)))\n  .catch(error => dispatch(contentFailed(error.message)));\n\n}\n\nexport const contentLoading = () => {\n  console.log(\"ActionCreator-contentLoading\");\n  return{\n  type: ActionTypes.CONTENT_LOADING\n}}\n\nexport const contentFailed = ((errmess) => {\n  return({\n  type: ActionTypes.CONTENT_FAILED,\n  payload: errmess});\n});\n\nexport const addContent = (content) => {\n  console.log(\"ActionCreator-addContent, content: \", content); \n  return({\n    type: ActionTypes.ADD_CONTENT,\n    payload: content\n  });\n}\n\n\n\n\n//////////// LEADERS //////////////\n\nexport const fetchLeaders = () => (dispatch) => {\n\n  dispatch(leadersLoading(true));\n\n  return fetch(baseUrl + '/leaders'+\".json\")\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(leaders => dispatch(addLeaders(leaders)))\n  .catch(error => dispatch(leadersFailed(error.message)));\n\n}\n\n\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = ((errmess) => {\n  return({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess});\n});\n\nexport const addLeaders = (leaders) => {\n  //alert(\"action creator, leader: \"+ JSON.stringify(leaders))\n  return({\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n  });\n}\n\n\n//////////// DISHES //////////////\n\n\nexport const fetchDishes = () => (dispatch) => {\n  console.log(\"ActionCreator-fetchDishes\");\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + '/dishes'+\".json\")\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n\n}\n\n\n//returning an action\nexport const dishesLoading = () => {\n  console.log(\"ActionCreator-dishesLoading\");\n    return{type: ActionTypes.DISHES_LOADING}\n}\n\nexport const dishesFailed = ((errmess) => {\n    //alert(\"actionCreator.js - dishesFailed: \"+ errmess);\n    return({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess});\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n\n//////////// COMMENTS //////////////\n\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + '/comments'+\".json\")\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n\n//////////// PROMOTIONS //////////////\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + '/promotions'+\".json\")\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\n*/","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion/confusion-new/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchMyContent","id","fetch","fetchContent","fetchDishes","fetchLeaders","fetchPromos","fetchComments","type","method","newJson","dispatch","then","response","ok","console","log","error","Error","status","statusText","message","errmess","json","values","add","catch","failed","loading","actionType","MYCONTENT_LOADING","DISHES_LOADING","LEADERS_LOADING","PROMOS_LOADING","MYCONTENT_FAILED","CONTENT_FAILED","DISHES_FAILED","LEADERS_FAILED","PROMOS_FAILED","COMMENTS_FAILED","payload","ADD_MYCONTENT","ADD_CONTENT","ADD_DISHES","ADD_LEADERS","ADD_COMMENTS","signup","fields_value","newContent","password","title","titleFontSize","description","descriptionFontSize","color","dishes","body","JSON","stringify","headers","credentials","addContent","alert","putContent","addMyContent","postFeedback","firstName","lastName","telNum","email","agree","contactType","newFeedback","date","Date","toISOString","addFeedback","feedback","ADD_COMMENT","postComment","dishId","rating","author","comment","newComment","addComment","myContent","contentLoading","CONTENT_LOADING","contentFailed","content"],"mappings":"AACA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;AAEA,OAAO,MAAMC,cAAc,GAAIC,EAAD,IAAQC,KAAK,CAAC,WAAD,EAAcD,EAAd,EAAkB,KAAlB,EAAyB,IAAzB,CAApC;AAEP,OAAO,MAAME,YAAY,GAAG,MAAMD,KAAK,CAAC,SAAD,EAAY,EAAZ,EAAgB,KAAhB,EAAuB,IAAvB,CAAhC;AAEP,OAAO,MAAME,WAAW,GAAG,MAAMF,KAAK,CAAC,QAAD,EAAW,EAAX,EAAe,KAAf,EAAsB,IAAtB,CAA/B;AAEP,OAAO,MAAMG,YAAY,GAAG,MAAMH,KAAK,CAAC,SAAD,EAAY,EAAZ,EAAgB,KAAhB,EAAuB,IAAvB,CAAhC;AAEP,OAAO,MAAMI,WAAW,GAAG,MAAMJ,KAAK,CAAC,YAAD,EAAe,EAAf,EAAmB,KAAnB,EAA0B,IAA1B,CAA/B;AAEP,OAAO,MAAMK,aAAa,GAAG,MAAML,KAAK,CAAC,UAAD,EAAa,EAAb,EAAiB,KAAjB,EAAwB,IAAxB,CAAjC,C,CAGP;;AAEA,OAAO,MAAMA,KAAK,GAAG,CAACM,IAAD,EAAOP,EAAP,EAAWQ,MAAX,EAAmBC,OAAnB,KAAgCC,QAAD,IAAc;AAChE;;;;;;;;;AAUA;AACA,MAAGH,IAAI,KAAK,WAAT,IAAwBP,EAAE,KAAK,IAAlC,EAAuC;AACrCA,IAAAA,EAAE,GAAG,GAAL;AACD;;AACD,SAAOC,KAAK,CAACH,OAAO,GAAG,GAAV,GAAcS,IAAd,GAAmB,GAAnB,GAAuBP,EAAvB,GAA0B,OAA3B,CAAL,CACNW,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAuBR,IAAvB,GAA4BP,EAA5B,GAA+B,8BAA3C,EAA2EY,QAA3E;AACA,aAAOA,QAAP;AACD,KAHD,MAGO;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAY,8DAAZ,EAA4EH,QAA5E;AACA,UAAII,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWL,QAAQ,CAACM,MAApB,GAA6B,IAA7B,GAAoCN,QAAQ,CAACO,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,YAAMI,KAAN;AACD;AACF,GAXI,EAYLA,KAAK,IAAI;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ,EAA0EC,KAAK,CAACI,OAAhF;AACI,QAAIC,OAAO,GAAG,IAAIJ,KAAJ,CAAUD,KAAK,CAACI,OAAhB,CAAd;AACA,UAAMC,OAAN;AACL,GAhBI,EAiBNV,IAjBM,CAiBDC,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EAjBX,EAkBNX,IAlBM,CAkBDY,MAAM,IAAIb,QAAQ,CAACc,GAAG,CAACD,MAAD,EAAShB,IAAT,CAAJ,CAlBjB,EAmBNkB,KAnBM,CAmBAT,KAAK,IAAIN,QAAQ,CAACgB,MAAM,CAACV,KAAK,CAACI,OAAP,CAAP,CAnBjB,CAAP;AAqBD,CApCM;AAsCP,OAAO,MAAMO,OAAO,GAAIpB,IAAD,IAAU;AAE/BO,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CR,IAA5C;AACA,MAAIqB,UAAU,GAAG,IAAjB;;AACA,UAAQrB,IAAR;AACE,SAAK,WAAL;AACEqB,MAAAA,UAAU,GAAG/B,WAAW,CAACgC,iBAAzB;AACA;;AACF,SAAK,QAAL;AACED,MAAAA,UAAU,GAAG/B,WAAW,CAACiC,cAAzB;AACA;;AACF,SAAK,SAAL;AACEF,MAAAA,UAAU,GAAG/B,WAAW,CAACkC,eAAzB;AACA;;AACF,SAAK,YAAL;AACEH,MAAAA,UAAU,GAAG/B,WAAW,CAACmC,cAAzB;AACA;AAZJ;;AAcA,SAAM;AACNzB,IAAAA,IAAI,EAAEqB;AADA,GAAN;AAEA,CApBK;AAsBP,OAAO,MAAMF,MAAM,GAAI,CAACL,OAAD,EAAUd,IAAV,KAAmB;AACxCO,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CM,OAA/C,EAAwD,SAAxD,EAAmEd,IAAnE;AACA,MAAIqB,UAAU,GAAG,IAAjB;;AACA,UAAQrB,IAAR;AACE,SAAK,WAAL;AACEqB,MAAAA,UAAU,GAAG/B,WAAW,CAACoC,gBAAzB;AACA;;AACF,SAAK,SAAL;AACEL,MAAAA,UAAU,GAAG/B,WAAW,CAACqC,cAAzB;AACA;;AACF,SAAK,QAAL;AACEN,MAAAA,UAAU,GAAG/B,WAAW,CAACsC,aAAzB;AACA;;AACF,SAAK,SAAL;AACEP,MAAAA,UAAU,GAAG/B,WAAW,CAACuC,cAAzB;AACA;;AACF,SAAK,YAAL;AACER,MAAAA,UAAU,GAAG/B,WAAW,CAACwC,aAAzB;AACA;;AACF,SAAK,UAAL;AACET,MAAAA,UAAU,GAAG/B,WAAW,CAACyC,eAAzB;AACA;AAlBJ;;AAoBA,SAAO;AACP/B,IAAAA,IAAI,EAAEqB,UADC;AAEPW,IAAAA,OAAO,EAAElB;AAFF,GAAP;AAGD,CA1BM;AA4BP,OAAO,MAAMG,GAAG,GAAG,CAACD,MAAD,EAAShB,IAAT,KAAkB;AACnCO,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CQ,MAA3C,EAAmD,SAAnD,EAA8DhB,IAA9D;AACA,MAAIqB,UAAU,GAAG,IAAjB;;AACA,UAAQrB,IAAR;AACE,SAAK,WAAL;AACEqB,MAAAA,UAAU,GAAG/B,WAAW,CAAC2C,aAAzB;AACA;;AACF,SAAK,SAAL;AACEZ,MAAAA,UAAU,GAAG/B,WAAW,CAAC4C,WAAzB;AACA;;AACF,SAAK,QAAL;AACEb,MAAAA,UAAU,GAAG/B,WAAW,CAAC6C,UAAzB;AACA;;AACF,SAAK,SAAL;AACEd,MAAAA,UAAU,GAAG/B,WAAW,CAAC8C,WAAzB;AACA;;AACF,SAAK,UAAL;AACEf,MAAAA,UAAU,GAAG/B,WAAW,CAAC+C,YAAzB;AACA;AAfJ;;AAiBA,SAAO;AACLrC,IAAAA,IAAI,EAAEqB,UADD;AAELW,IAAAA,OAAO,EAAEhB;AAFJ,GAAP;AAID,CAxBM,C,CA+BP;;AAEA,OAAO,MAAMsB,MAAM,GAAIC,YAAD,IAAmBpC,QAAD,IAAc;AACpDI,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEA,QAAMgC,UAAU,GAAG;AACjB/C,IAAAA,EAAE,EAAC8C,YAAY,CAAC,CAAD,CADE;AAEjBE,IAAAA,QAAQ,EAACF,YAAY,CAAC,CAAD,CAFJ;AAGjBG,IAAAA,KAAK,EAAEH,YAAY,CAAC,CAAD,CAHF;AAIjBI,IAAAA,aAAa,EAAEJ,YAAY,CAAC,CAAD,CAJV;AAKjBK,IAAAA,WAAW,EAAEL,YAAY,CAAC,CAAD,CALR;AAMjBM,IAAAA,mBAAmB,EAAEN,YAAY,CAAC,CAAD,CANhB;AAOjBO,IAAAA,KAAK,EAAEP,YAAY,CAAC,CAAD,CAPF;AAQjBQ,IAAAA,MAAM,EAAER,YAAY,CAAC,CAAD;AARH,GAAnB;AAWA,SAAO7C,KAAK,CAACH,OAAO,GAAG,eAAX,EAA4B;AACpCU,IAAAA,MAAM,EAAE,MAD4B;AAEpC+C,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,UAAf,CAF8B;AAGpCW,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAH2B;AAMpCC,IAAAA,WAAW,EAAE;AANuB,GAA5B,CAAL,CAQNhD,IARM,CAQDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAII,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWL,QAAQ,CAACM,MAApB,GAA6B,IAA7B,GAAoCN,QAAQ,CAACO,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,YAAMI,KAAN;AACD;AACF,GAhBI,EAiBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GAnBI,EAoBNL,IApBM,CAoBDC,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EApBX,EAqBNX,IArBM,CAqBDC,QAAQ,IAAI;AAChBF,IAAAA,QAAQ,CAACkD,UAAU,CAAChD,QAAD,CAAX,CAAR;AACAiD,IAAAA,KAAK,CAAC,wCAAD,CAAL;AACD,GAxBM,EAyBNpC,KAzBM,CAyBAT,KAAK,IAAK;AAAEF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,KAAK,CAACI,OAArC;AAClByC,IAAAA,KAAK,CAAC,gDAA8C7C,KAAK,CAACI,OAArD,CAAL;AAAqE,GA1B/D,CAAP;AA2BD,CAzCM,C,CA6CP;;AAEA,OAAO,MAAM0C,UAAU,GAAIhB,YAAD,IAAmBpC,QAAD,IAAc;AAGxDI,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAEA,QAAMgC,UAAU,GAAG;AACjB/C,IAAAA,EAAE,EAAC8C,YAAY,CAAC,CAAD,CADE;AAEjBE,IAAAA,QAAQ,EAACF,YAAY,CAAC,CAAD,CAFJ;AAGjBG,IAAAA,KAAK,EAAEH,YAAY,CAAC,CAAD,CAHF;AAIjBI,IAAAA,aAAa,EAAEJ,YAAY,CAAC,CAAD,CAJV;AAKjBK,IAAAA,WAAW,EAAEL,YAAY,CAAC,CAAD,CALR;AAMjBM,IAAAA,mBAAmB,EAAEN,YAAY,CAAC,CAAD,CANhB;AAOjBO,IAAAA,KAAK,EAAEP,YAAY,CAAC,CAAD,CAPF;AAQjBQ,IAAAA,MAAM,EAAER,YAAY,CAAC,CAAD;AARH,GAAnB;AAWA,SAAO7C,KAAK,CAACH,OAAO,GAAG,WAAV,GAAsBgD,YAAY,CAAC,CAAD,CAAlC,GAAsC,OAAvC,EAAgD;AACxDtC,IAAAA,MAAM,EAAE,OADgD;AAExD+C,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,UAAf,CAFkD;AAGxDW,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAH+C;AAMxDC,IAAAA,WAAW,EAAE;AAN2C,GAAhD,CAAL,CAQNhD,IARM,CAQDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAII,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWL,QAAQ,CAACM,MAApB,GAA6B,IAA7B,GAAoCN,QAAQ,CAACO,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,YAAMI,KAAN;AACD;AACF,GAhBI,EAiBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GAnBI,EAoBNL,IApBM,CAoBDC,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EApBX,EAqBNX,IArBM,CAqBDC,QAAQ,IAAI;AAChB;AACAF,IAAAA,QAAQ,CAACqD,YAAY,CAACnD,QAAD,CAAb,CAAR,CAFgB,CAGhB;AACD,GAzBM,EA0BNa,KA1BM,CA0BAT,KAAK,IAAK;AAAEF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,KAAK,CAACI,OAArC;AAClByC,IAAAA,KAAK,CAAC,gDAA8C7C,KAAK,CAACI,OAArD,CAAL;AAAqE,GA3B/D,CAAP;AA4BD,CA5CM,C,CAiDP;;AAEA,OAAO,MAAM4C,YAAY,GAAG,CAAEC,SAAF,EAAaC,QAAb,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,WAA7C,EAA0DlD,OAA1D,KAAuEV,QAAD,IAAc;AAE9G,QAAM6D,WAAW,GAAG;AAClBN,IAAAA,SAAS,EAAEA,SADO;AAElBC,IAAAA,QAAQ,EAAEA,QAFQ;AAGlBC,IAAAA,MAAM,EAAEA,MAHU;AAIlBC,IAAAA,KAAK,EAAEA,KAJW;AAKlBC,IAAAA,KAAK,EAAEA,KALW;AAMlBC,IAAAA,WAAW,EAAEA,WANK;AAOlBlD,IAAAA,OAAO,EAAEA;AAPS,GAApB,CAF8G,CAY/G;;AACCmD,EAAAA,WAAW,CAACC,IAAZ,GAAmB,IAAIC,IAAJ,GAAWC,WAAX,EAAnB;AAEA,SAAOzE,KAAK,CAACH,OAAO,GAAG,WAAV,GAAsB,OAAvB,EAAgC;AACxCU,IAAAA,MAAM,EAAE,MADgC;AAExC+C,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAec,WAAf,CAFkC;AAGxCb,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAH+B;AAMxC;AACAC,IAAAA,WAAW,EAAE;AAP2B,GAAhC,CAAL,CASNhD,IATM,CASDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAII,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWL,QAAQ,CAACM,MAApB,GAA6B,IAA7B,GAAoCN,QAAQ,CAACO,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,YAAMI,KAAN;AACD;AACF,GAjBI,EAkBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GApBI,EAqBNL,IArBM,CAqBDC,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EArBX,EAsBNX,IAtBM,CAsBDC,QAAQ,IAAI;AAChBF,IAAAA,QAAQ,CAACiE,WAAW,CAAC/D,QAAD,CAAZ,CAAR;AACAiD,IAAAA,KAAK,CAAC,yCAAD,CAAL;AACD,GAzBM,EA0BNpC,KA1BM,CA0BAT,KAAK,IAAK;AAAEF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,KAAK,CAACI,OAAtC;AAClByC,IAAAA,KAAK,CAAC,iDAA+C7C,KAAK,CAACI,OAAtD,CAAL;AAAsE,GA3BhE,CAAP;AA4BD,CA3CM;AA6CP,OAAO,MAAMuD,WAAW,GAAIC,QAAD,KAAe;AACxCrE,EAAAA,IAAI,EAAEV,WAAW,CAACgF,WADsB;AAExCtC,EAAAA,OAAO,EAAEqC;AAF+B,CAAf,CAApB,C,CAOP;AAEA;;AACA,OAAO,MAAME,WAAW,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,OAAzB,KAAsCxE,QAAD,IAAc;AAE5E,QAAMyE,UAAU,GAAG;AACfJ,IAAAA,MAAM,EAAEA,MADO;AAEfC,IAAAA,MAAM,EAAEA,MAFO;AAGfC,IAAAA,MAAM,EAAEA,MAHO;AAIfC,IAAAA,OAAO,EAAEA;AAJM,GAAnB,CAF4E,CAS7E;;AACCC,EAAAA,UAAU,CAACX,IAAX,GAAkB,IAAIC,IAAJ,GAAWC,WAAX,EAAlB;AAEA,SAAOzE,KAAK,CAACH,OAAO,GAAG,WAAV,GAAsB,OAAvB,EAAgC;AACxCU,IAAAA,MAAM,EAAE,MADgC;AAExC+C,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe0B,UAAf,CAFkC;AAGxCzB,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAH+B;AAMxC;AACAC,IAAAA,WAAW,EAAE;AAP2B,GAAhC,CAAL,CASNhD,IATM,CASDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAII,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWL,QAAQ,CAACM,MAApB,GAA6B,IAA7B,GAAoCN,QAAQ,CAACO,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,YAAMI,KAAN;AACD;AACF,GAjBI,EAkBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GApBI,EAqBNL,IArBM,CAqBDC,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EArBX,EAsBNX,IAtBM,CAsBDC,QAAQ,IAAIF,QAAQ,CAAC0E,UAAU,CAACxE,QAAD,CAAX,CAtBnB,EAuBNa,KAvBM,CAuBAT,KAAK,IAAK;AAAEF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,KAAK,CAACI,OAAnC;AAA6CyC,IAAAA,KAAK,CAAC,8CAA4C7C,KAAK,CAACI,OAAnD,CAAL;AAAmE,GAvB5H,CAAP;AAwBD,CApCM;AAuCP,OAAO,MAAMgE,UAAU,GAAIF,OAAD,KAAc;AACtC3E,EAAAA,IAAI,EAAEV,WAAW,CAACgF,WADoB;AAEtCtC,EAAAA,OAAO,EAAE2C;AAF6B,CAAd,CAAnB;AAMP,OAAO,MAAMnB,YAAY,GAAIsB,SAAD,IAAe;AACzCvE,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDsE,SAAnD;AACA,SAAO;AACL9E,IAAAA,IAAI,EAAEV,WAAW,CAAC2C,aADb;AAELD,IAAAA,OAAO,EAAE8C;AAFJ,GAAP;AAID,CANM;AAQP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClCxE,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,SAAM;AACNR,IAAAA,IAAI,EAAEV,WAAW,CAAC0F;AADZ,GAAN;AAEA,CAJK;AAMP,OAAO,MAAMC,aAAa,GAAKnE,OAAD,IAAa;AACzC,SAAO;AACPd,IAAAA,IAAI,EAAEV,WAAW,CAACqC,cADX;AAEPK,IAAAA,OAAO,EAAElB;AAFF,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMuC,UAAU,GAAI6B,OAAD,IAAa;AACrC3E,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmD0E,OAAnD;AACA,SAAO;AACLlF,IAAAA,IAAI,EAAEV,WAAW,CAAC4C,WADb;AAELF,IAAAA,OAAO,EAAEkD;AAFJ,GAAP;AAID,CANM;AAQP","sourcesContent":["\nimport * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n/*\nexport const postComment = (dishId, rating, author, comment) => fetch(\"comments\", \"\", \"POST\", {\n\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment,\n      date:new Date().toISOString()\n  })\n\n////// feedback //////\n\nexport const postFeedback = ( firstName, lastName, telNum, email, agree, contactType, message) => fetch(\"comments\", \"\", \"POST\", {\n    firstName: firstName,\n    lastName: lastName,\n    telNum: telNum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message,\n    date:new Date().toISOString()\n  })\n\n////////////  signup  ////////////\n\nexport const signup = (fields_value) => fetch(\"content\", fields_value[0], \"POST\", {\n  id:fields_value[0],\n  password:fields_value[1],\n  title: fields_value[2],\n  titleFontSize: fields_value[3],\n  description: fields_value[4],\n  descriptionFontSize: fields_value[5],\n  color: fields_value[6],\n  dishes: fields_value[7]\n})\n\n\n///////////putContnet///////////\n\nexport const putContent = (fields_value) => fetch(\"myContent\", fields_value[0], \"PUT\", {\n  id:fields_value[0],\n  password:fields_value[1],\n  title: fields_value[2],\n  titleFontSize: fields_value[3],\n  description: fields_value[4],\n  descriptionFontSize: fields_value[5],\n  color: fields_value[6],\n  dishes: fields_value[7]\n})\n*/\n\n////////FETCH //////////////\n\nexport const fetchMyContent = (id) => fetch(\"myContent\", id, \"GET\", null)\n\nexport const fetchContent = () => fetch(\"content\", \"\", \"GET\", null)\n\nexport const fetchDishes = () => fetch(\"dishes\", \"\", \"GET\", null)\n\nexport const fetchLeaders = () => fetch(\"leaders\", \"\", \"GET\", null)\n\nexport const fetchPromos = () => fetch(\"promotions\", \"\", \"GET\", null)\n\nexport const fetchComments = () => fetch(\"comments\", \"\", \"GET\", null)\n\n\n////// ACTION GENERATOR /////\n\nexport const fetch = (type, id, method, newJson) => (dispatch) => {\n  /*\n  , {\n    method: method,\n    body: JSON.stringify(newJson),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n}*/\n\n  //if(method === \"GET\") dispatch(loading(type));\n  if(type === \"myContent\" && id === null){\n    id = \"0\";\n  }\n  return fetch(baseUrl + '/'+type+'/'+id+\".json\")\n  .then(response => {\n      if (response.ok) {\n        console.log(\"ActionCreator-fetch \"+type+id+\", response is OK\\nresponse: \", response);        \n        return response;\n      } else {\n        console.log(\"ActionCreator-fetchmyContent, response is NOT OK\\nresponse: \", response);   \n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n      console.log(\"ActionCreator-fetchmyContent, NO response \\error.message: \", error.message); \n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(values => dispatch(add(values, type)))\n  .catch(error => dispatch(failed(error.message)));\n\n}\n\nexport const loading = (type) => { \n\n  console.log(\"ActionCreator-loading type: \", type); \n  var actionType = null;\n  switch (type){\n    case \"myContent\":\n      actionType = ActionTypes.MYCONTENT_LOADING\n      break\n    case \"dishes\":\n      actionType = ActionTypes.DISHES_LOADING\n      break\n    case \"leaders\":\n      actionType = ActionTypes.LEADERS_LOADING\n      break\n    case \"promotions\":\n      actionType = ActionTypes.PROMOS_LOADING\n      break\n  }\n  return{\n  type: actionType\n}}\n\nexport const failed = ((errmess, type) => {  \n  console.log(\"ActionCreator-failed, errmess: \", errmess, \" type: \", type); \n  var actionType = null;\n  switch (type){\n    case \"myContent\":\n      actionType = ActionTypes.MYCONTENT_FAILED\n      break\n    case \"content\":\n      actionType = ActionTypes.CONTENT_FAILED\n      break\n    case \"dishes\":\n      actionType = ActionTypes.DISHES_FAILED\n      break\n    case \"leaders\":\n      actionType = ActionTypes.LEADERS_FAILED\n      break\n    case \"promotions\":\n      actionType = ActionTypes.PROMOS_FAILED\n      break\n    case \"comments\":\n      actionType = ActionTypes.COMMENTS_FAILED\n      break\n  }\n  return({\n  type: actionType,\n  payload: errmess});\n});\n\nexport const add = (values, type) => {\n  console.log(\"ActionCreator-add, values: \", values, \" type: \", type); \n  var actionType = null;\n  switch (type){\n    case \"myContent\":\n      actionType = ActionTypes.ADD_MYCONTENT\n      break\n    case \"content\":\n      actionType = ActionTypes.ADD_CONTENT\n      break\n    case \"dishes\":\n      actionType = ActionTypes.ADD_DISHES\n      break\n    case \"leaders\":\n      actionType = ActionTypes.ADD_LEADERS\n      break\n    case \"comments\":\n      actionType = ActionTypes.ADD_COMMENTS\n      break\n  }\n  return({\n    type: actionType,\n    payload: values\n  });\n}\n\n\n\n\n\n\n////////////  signup  ////////////\n\nexport const signup = (fields_value) => (dispatch) => {\n  console.log(\"signup\");\n\n  const newContent = {\n    id:fields_value[0],\n    password:fields_value[1],\n    title: fields_value[2],\n    titleFontSize: fields_value[3],\n    description: fields_value[4],\n    descriptionFontSize: fields_value[5],\n    color: fields_value[6],\n    dishes: fields_value[7]\n  };\n  \n  return fetch(baseUrl + '/content.json', {\n      method: \"POST\",\n      body: JSON.stringify(newContent),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => {\n    dispatch(addContent(response));\n    alert('Your content was submited successfully');\n  })\n  .catch(error =>  { console.log('submmit content', error.message);\n   alert('Your content could not be submited\\nError: '+error.message); });\n};\n\n\n\n///////////putContnet///////////\n\nexport const putContent = (fields_value) => (dispatch) => {\n\n\n  console.log(\"ActionCreator-putcontent\");\n\n  const newContent = {\n    id:fields_value[0],\n    password:fields_value[1],\n    title: fields_value[2],\n    titleFontSize: fields_value[3],\n    description: fields_value[4],\n    descriptionFontSize: fields_value[5],\n    color: fields_value[6],\n    dishes: fields_value[7]\n  };\n  \n  return fetch(baseUrl + '/content/'+fields_value[0]+\".json\", {\n      method: \"PATCH\",\n      body: JSON.stringify(newContent),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => {\n    //dispatch(addContent(response));\n    dispatch(addMyContent(response));\n    //alert('Your content was submited successfully');\n  })\n  .catch(error =>  { console.log('submmit content', error.message);\n   alert('Your content could not be submited\\nError: '+error.message); });\n};\n\n\n\n\n///////////feedback///////////\n\nexport const postFeedback = ( firstName, lastName, telNum, email, agree, contactType, message) => (dispatch) => {\n\n  const newFeedback = {\n    firstName: firstName,\n    lastName: lastName,\n    telNum: telNum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  \n //previesdly the id and the date where added in comments.js\n  newFeedback.date = new Date().toISOString();\n  \n  return fetch(baseUrl + '/feedback'+\".json\", {\n      method: \"POST\",\n      body: JSON.stringify(newFeedback),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //related to the backend \n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => {\n    dispatch(addFeedback(response));\n    alert('Your feedback was submited successfully');\n  })\n  .catch(error =>  { console.log('submmit feedback', error.message);\n   alert('Your feedback could not be submited\\nError: '+error.message); });\n};\n\nexport const addFeedback = (feedback) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: feedback\n});\n\n\n\n///////////comments////////////\n\n//since this is a punc, I need to add the dispatch. So, I'll send the function of a function\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n  const newComment = {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n  };\n  \n //previesdly the id and the date where added in comments.js\n  newComment.date = new Date().toISOString();\n  \n  return fetch(baseUrl + '/comments'+\".json\", {\n      method: \"POST\",\n      body: JSON.stringify(newComment),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //related to the backend \n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => dispatch(addComment(response)))\n  .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\n};\n\n\nexport const addComment = (comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\n\n\nexport const addMyContent = (myContent) => {\n  console.log(\"ActionCreator-addContent, content: \", myContent); \n  return({\n    type: ActionTypes.ADD_MYCONTENT,\n    payload: myContent\n  });\n}\n\nexport const contentLoading = () => {\n  console.log(\"ActionCreator-contentLoading\");\n  return{\n  type: ActionTypes.CONTENT_LOADING\n}}\n\nexport const contentFailed = ((errmess) => {\n  return({\n  type: ActionTypes.CONTENT_FAILED,\n  payload: errmess});\n});\n\nexport const addContent = (content) => {\n  console.log(\"ActionCreator-addContent, content: \", content); \n  return({\n    type: ActionTypes.ADD_CONTENT,\n    payload: content\n  });\n}\n\n/*\n\n\n/// fetch myContent////\n\nexport const fetchMyContent = (id) => (dispatch) => {\n\n  dispatch(myContentLoading(true));\n\n  if(id === null){\n    id = \"0\";\n  }\n  return fetch(baseUrl + '/content/'+id+\".json\")\n  .then(response => {\n      if (response.ok) {\n        console.log(\"ActionCreator-fetchmyContent, response is OK\\nresponse: \", response);        \n        return response;\n      } else {\n        console.log(\"ActionCreator-fetchmyContent, response is NOT OK\\nresponse: \", response);   \n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n      console.log(\"ActionCreator-fetchmyContent, NO response \\error.message: \", error.message); \n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(myContent => dispatch(addMyContent(myContent)))\n  .catch(error => dispatch(myContentFailed(error.message)));\n\n}\n\nexport const myContentLoading = () => {\n  console.log(\"ActionCreator-contentLoading\");\n  return{\n  type: ActionTypes.MYCONTENT_LOADING\n}}\n\nexport const myContentFailed = ((errmess) => {\n  return({\n  type: ActionTypes.MYCONTENT_FAILED,\n  payload: errmess});\n});\n\n\n\n\n/// fetch content////\n\nexport const fetchContent = () => (dispatch) => {\n\n  dispatch(contentLoading(true));\n\n  return fetch(baseUrl + '/content'+\".json\")\n  .then(response => {\n      if (response.ok) {\n        console.log(\"ActionCreator-fetchContent, response is OK\\nresponse: \", response);        \n        return response;\n      } else {\n        console.log(\"ActionCreator-fetchContent, response is NOT OK\\nresponse: \", response);   \n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n      console.log(\"ActionCreator-fetchContent, NO response \\error.message: \", error.message); \n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(content => dispatch(addContent(content)))\n  .catch(error => dispatch(contentFailed(error.message)));\n\n}\n\nexport const contentLoading = () => {\n  console.log(\"ActionCreator-contentLoading\");\n  return{\n  type: ActionTypes.CONTENT_LOADING\n}}\n\nexport const contentFailed = ((errmess) => {\n  return({\n  type: ActionTypes.CONTENT_FAILED,\n  payload: errmess});\n});\n\nexport const addContent = (content) => {\n  console.log(\"ActionCreator-addContent, content: \", content); \n  return({\n    type: ActionTypes.ADD_CONTENT,\n    payload: content\n  });\n}\n\n\n\n\n//////////// LEADERS //////////////\n\nexport const fetchLeaders = () => (dispatch) => {\n\n  dispatch(leadersLoading(true));\n\n  return fetch(baseUrl + '/leaders'+\".json\")\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(leaders => dispatch(addLeaders(leaders)))\n  .catch(error => dispatch(leadersFailed(error.message)));\n\n}\n\n\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = ((errmess) => {\n  return({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess});\n});\n\nexport const addLeaders = (leaders) => {\n  //alert(\"action creator, leader: \"+ JSON.stringify(leaders))\n  return({\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n  });\n}\n\n\n//////////// DISHES //////////////\n\n\nexport const fetchDishes = () => (dispatch) => {\n  console.log(\"ActionCreator-fetchDishes\");\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + '/dishes'+\".json\")\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n\n}\n\n\n//returning an action\nexport const dishesLoading = () => {\n  console.log(\"ActionCreator-dishesLoading\");\n    return{type: ActionTypes.DISHES_LOADING}\n}\n\nexport const dishesFailed = ((errmess) => {\n    //alert(\"actionCreator.js - dishesFailed: \"+ errmess);\n    return({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess});\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n\n//////////// COMMENTS //////////////\n\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + '/comments'+\".json\")\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n\n//////////// PROMOTIONS //////////////\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + '/promotions'+\".json\")\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\n*/"]},"metadata":{},"sourceType":"module"}