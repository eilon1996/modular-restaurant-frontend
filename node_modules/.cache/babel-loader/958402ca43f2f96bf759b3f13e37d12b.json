{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nimport useDebouncedCallback from './useDebouncedCallback';\n\nfunction valueEquality(left, right) {\n  return left === right;\n}\n\nexport default function useDebounce(value, delay, options) {\n  var eq = options && options.equalityFn ? options.equalityFn : valueEquality;\n\n  var _a = useState(value),\n      state = _a[0],\n      dispatch = _a[1];\n\n  var debounced = useDebouncedCallback(useCallback(function (value) {\n    return dispatch(value);\n  }, []), delay, options);\n  var previousValue = useRef(value);\n  useEffect(function () {\n    // We need to use this condition otherwise we will run debounce timer for the first render (including maxWait option)\n    if (!eq(previousValue.current, value)) {\n      debounced.callback(value);\n      previousValue.current = value;\n    }\n  }, [value, debounced, eq]);\n  return [state, {\n    cancel: debounced.cancel,\n    pending: debounced.pending,\n    flush: debounced.flush\n  }];\n}","map":{"version":3,"sources":["/home/eilon/programing/full-stack/confusion-new (copy)/confusion/node_modules/use-debounce/esm/useDebounce.js"],"names":["useCallback","useEffect","useRef","useState","useDebouncedCallback","valueEquality","left","right","useDebounce","value","delay","options","eq","equalityFn","_a","state","dispatch","debounced","previousValue","current","callback","cancel","pending","flush"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,KAA7B,EAAoC;AAChC,SAAOD,IAAI,KAAKC,KAAhB;AACH;;AACD,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,OAAnC,EAA4C;AACvD,MAAIC,EAAE,GAAGD,OAAO,IAAIA,OAAO,CAACE,UAAnB,GAAgCF,OAAO,CAACE,UAAxC,GAAqDR,aAA9D;;AACA,MAAIS,EAAE,GAAGX,QAAQ,CAACM,KAAD,CAAjB;AAAA,MAA0BM,KAAK,GAAGD,EAAE,CAAC,CAAD,CAApC;AAAA,MAAyCE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAAtD;;AACA,MAAIG,SAAS,GAAGb,oBAAoB,CAACJ,WAAW,CAAC,UAAUS,KAAV,EAAiB;AAAE,WAAOO,QAAQ,CAACP,KAAD,CAAf;AAAyB,GAA7C,EAA+C,EAA/C,CAAZ,EAAgEC,KAAhE,EAAuEC,OAAvE,CAApC;AACA,MAAIO,aAAa,GAAGhB,MAAM,CAACO,KAAD,CAA1B;AACAR,EAAAA,SAAS,CAAC,YAAY;AAClB;AACA,QAAI,CAACW,EAAE,CAACM,aAAa,CAACC,OAAf,EAAwBV,KAAxB,CAAP,EAAuC;AACnCQ,MAAAA,SAAS,CAACG,QAAV,CAAmBX,KAAnB;AACAS,MAAAA,aAAa,CAACC,OAAd,GAAwBV,KAAxB;AACH;AACJ,GANQ,EAMN,CAACA,KAAD,EAAQQ,SAAR,EAAmBL,EAAnB,CANM,CAAT;AAOA,SAAO,CAACG,KAAD,EAAQ;AAAEM,IAAAA,MAAM,EAAEJ,SAAS,CAACI,MAApB;AAA4BC,IAAAA,OAAO,EAAEL,SAAS,CAACK,OAA/C;AAAwDC,IAAAA,KAAK,EAAEN,SAAS,CAACM;AAAzE,GAAR,CAAP;AACH","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport useDebouncedCallback from './useDebouncedCallback';\nfunction valueEquality(left, right) {\n    return left === right;\n}\nexport default function useDebounce(value, delay, options) {\n    var eq = options && options.equalityFn ? options.equalityFn : valueEquality;\n    var _a = useState(value), state = _a[0], dispatch = _a[1];\n    var debounced = useDebouncedCallback(useCallback(function (value) { return dispatch(value); }, []), delay, options);\n    var previousValue = useRef(value);\n    useEffect(function () {\n        // We need to use this condition otherwise we will run debounce timer for the first render (including maxWait option)\n        if (!eq(previousValue.current, value)) {\n            debounced.callback(value);\n            previousValue.current = value;\n        }\n    }, [value, debounced, eq]);\n    return [state, { cancel: debounced.cancel, pending: debounced.pending, flush: debounced.flush }];\n}\n"]},"metadata":{},"sourceType":"module"}