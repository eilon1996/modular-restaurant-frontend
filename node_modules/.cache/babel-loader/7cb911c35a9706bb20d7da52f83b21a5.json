{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = (dishId, rating, author, comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  }\n});\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishees', {\n    method: \"head\",\n    mode: \"no-cors\"\n  }).then(status).then(res => res.json()).catch(function (error) {\n    alert(\"Error\", error);\n  });\n\n  function status(response) {\n    if (response.ok) {\n      return response;\n    }\n\n    return response.json().then(res => Promise.reject(res));\n  }\n}; // this is the way to return a function\n\n/*\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishees')\n    .then((response) => {\n        if (response.ok) {\n            alert(\"entered2\");\n          return response;\n        } else {\n            alert(\"entered3\");\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n      },\n      (error) => {\n          alert(\"entered2\");\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then((response) => {\n        alert(\"entered5\");\n        return response.json();\n    })\n    .then((dishes) => dispatch(addDishes(dishes)))\n    .catch((error) => {\n        return dispatch(dishesFailed(error.message))\n    });\n}\n*/\n//returning an action\n\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => {\n  alert(\"entered8\");\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: \"errmess\"\n  }; //payload: errmess\n};\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion2/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","dishId","rating","author","comment","type","ADD_COMMENT","payload","fetchDishes","dispatch","dishesLoading","fetch","method","mode","then","status","res","json","catch","error","alert","response","ok","Promise","reject","DISHES_LOADING","dishesFailed","errmess","DISHES_FAILED","addDishes","dishes","ADD_DISHES","fetchComments","Error","statusText","message","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["\nimport * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const addComment = (dishId, rating, author, comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: {\n        dishId: dishId,\n        rating: rating,\n        author: author,\n        comment: comment\n    }\n});\n\n\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishees', {\n    method: \"head\",\n    mode: \"no-cors\"\n    })\n    .then(status)\n    .then(res => res.json())\n    .catch(function(error) {\n        alert(\"Error\", error);\n    });\n\n    function status(response) {   \n        if (response.ok) {\n            return response;\n        }\n        return response.json().then(res => Promise.reject(res));\n    }\n}\n\n// this is the way to return a function\n/*\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishees')\n    .then((response) => {\n        if (response.ok) {\n            alert(\"entered2\");\n          return response;\n        } else {\n            alert(\"entered3\");\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n      },\n      (error) => {\n          alert(\"entered2\");\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then((response) => {\n        alert(\"entered5\");\n        return response.json();\n    })\n    .then((dishes) => dispatch(addDishes(dishes)))\n    .catch((error) => {\n        return dispatch(dishesFailed(error.message))\n    });\n}\n*/\n\n//returning an action\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = ((errmess) => {\n    alert(\"entered8\");\n    return({\n    type: ActionTypes.DISHES_FAILED,\n    payload: \"errmess\"});\n    //payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n\n\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + 'comments')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + 'promotions')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});"]},"metadata":{},"sourceType":"module"}