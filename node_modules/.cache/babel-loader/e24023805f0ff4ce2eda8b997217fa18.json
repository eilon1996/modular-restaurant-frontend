{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl'; ///////////putContnet///////////\n\nexport const putContent = title => dispatch => {\n  const newFeedback = {\n    title: title\n  };\n  return fetch(baseUrl + 'content', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    dispatch(addComment(response));\n    alert('Your feedback was submited successfully');\n  }).catch(error => {\n    console.log('submmit feedback', error.message);\n    alert('Your feedback could not be submited\\nError: ' + error.message);\n  });\n};\nexport const upda = feedback => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: feedback\n}); ///////////feedback///////////\n\nexport const submitFeedback = (firstName, lastName, telNum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstName: firstName,\n    lastName: lastName,\n    telNum: telNum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  }; //previesdly the id and the date where added in comments.js\n\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    //related to the backend \n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    dispatch(addFeedback(response));\n    alert('Your feedback was submited successfully');\n  }).catch(error => {\n    console.log('submmit feedback', error.message);\n    alert('Your feedback could not be submited\\nError: ' + error.message);\n  });\n};\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: feedback\n}); ///////////comments////////////\n//since this is a punc, I need to add the dispatch. So, I'll send the function of a function\n\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  }; //previesdly the id and the date where added in comments.js\n\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    //related to the backend \n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n}); //////////// LEADERS //////////////\n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => {\n  return {\n    type: ActionTypes.LEADERS_FAILED,\n    payload: errmess\n  };\n};\nexport const addLeaders = leaders => {\n  //alert(\"action creator, leader: \"+ JSON.stringify(leaders))\n  return {\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n  };\n};\n/*\nexport const addLeaders = (leaders) => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\n*/\n//////////// DISHES //////////////\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n}; //returning an action\n\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => {\n  //alert(\"actionCreator.js - dishesFailed: \"+ errmess);\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n  };\n};\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n}); //////////// COMMENTS //////////////\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n}); //////////// PROMOTIONS //////////////\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["/home/eilon/programing/full-stack/React/confusion/confusion-origin/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","putContent","title","dispatch","newFeedback","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","addComment","alert","catch","console","log","message","upda","feedback","type","ADD_COMMENT","payload","submitFeedback","firstName","lastName","telNum","email","agree","contactType","date","Date","toISOString","addFeedback","postComment","dishId","rating","author","comment","newComment","fetchLeaders","leadersLoading","errmess","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS"],"mappings":"AACA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,OAAT,QAAwB,mBAAxB,C,CAEA;;AAEA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAYC,QAAD,IAAc;AAEjD,QAAMC,WAAW,GAAG;AAClBF,IAAAA,KAAK,EAAEA;AADW,GAApB;AAIA,SAAOG,KAAK,CAACL,OAAO,GAAG,SAAX,EAAsB;AAC9BM,IAAAA,MAAM,EAAE,MADsB;AAE9BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,WAAf,CAFwB;AAG9BM,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHqB;AAM9BC,IAAAA,WAAW,EAAE;AANiB,GAAtB,CAAL,CAQNC,IARM,CAQDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAhBI,EAiBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GAnBI,EAoBNH,IApBM,CAoBDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EApBX,EAqBNP,IArBM,CAqBDC,QAAQ,IAAI;AAChBV,IAAAA,QAAQ,CAACiB,UAAU,CAACP,QAAD,CAAX,CAAR;AACAQ,IAAAA,KAAK,CAAC,yCAAD,CAAL;AACD,GAxBM,EAyBNC,KAzBM,CAyBAP,KAAK,IAAK;AAAEQ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCT,KAAK,CAACU,OAAtC;AAClBJ,IAAAA,KAAK,CAAC,iDAA+CN,KAAK,CAACU,OAAtD,CAAL;AAAsE,GA1BhE,CAAP;AA2BD,CAjCM;AAmCP,OAAO,MAAMC,IAAI,GAAIC,QAAD,KAAe;AACjCC,EAAAA,IAAI,EAAE7B,WAAW,CAAC8B,WADe;AAEjCC,EAAAA,OAAO,EAAEH;AAFwB,CAAf,CAAb,C,CAQP;;AAEA,OAAO,MAAMI,cAAc,GAAG,CAAEC,SAAF,EAAaC,QAAb,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,WAA7C,EAA0DZ,OAA1D,KAAuEtB,QAAD,IAAc;AAEhH,QAAMC,WAAW,GAAG;AAClB4B,IAAAA,SAAS,EAAEA,SADO;AAElBC,IAAAA,QAAQ,EAAEA,QAFQ;AAGlBC,IAAAA,MAAM,EAAEA,MAHU;AAIlBC,IAAAA,KAAK,EAAEA,KAJW;AAKlBC,IAAAA,KAAK,EAAEA,KALW;AAMlBC,IAAAA,WAAW,EAAEA,WANK;AAOlBZ,IAAAA,OAAO,EAAEA;AAPS,GAApB,CAFgH,CAYjH;;AACCrB,EAAAA,WAAW,CAACkC,IAAZ,GAAmB,IAAIC,IAAJ,GAAWC,WAAX,EAAnB;AAEA,SAAOnC,KAAK,CAACL,OAAO,GAAG,UAAX,EAAuB;AAC/BM,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,WAAf,CAFyB;AAG/BM,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHsB;AAM/B;AACAC,IAAAA,WAAW,EAAE;AAPkB,GAAvB,CAAL,CASNC,IATM,CASDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAjBI,EAkBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GApBI,EAqBNH,IArBM,CAqBDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EArBX,EAsBNP,IAtBM,CAsBDC,QAAQ,IAAI;AAChBV,IAAAA,QAAQ,CAACsC,WAAW,CAAC5B,QAAD,CAAZ,CAAR;AACAQ,IAAAA,KAAK,CAAC,yCAAD,CAAL;AACD,GAzBM,EA0BNC,KA1BM,CA0BAP,KAAK,IAAK;AAAEQ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCT,KAAK,CAACU,OAAtC;AAClBJ,IAAAA,KAAK,CAAC,iDAA+CN,KAAK,CAACU,OAAtD,CAAL;AAAsE,GA3BhE,CAAP;AA4BD,CA3CM;AA6CP,OAAO,MAAMgB,WAAW,GAAId,QAAD,KAAe;AACxCC,EAAAA,IAAI,EAAE7B,WAAW,CAAC8B,WADsB;AAExCC,EAAAA,OAAO,EAAEH;AAF+B,CAAf,CAApB,C,CAOP;AAEA;;AACA,OAAO,MAAMe,WAAW,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,OAAzB,KAAsC3C,QAAD,IAAc;AAE5E,QAAM4C,UAAU,GAAG;AACfJ,IAAAA,MAAM,EAAEA,MADO;AAEfC,IAAAA,MAAM,EAAEA,MAFO;AAGfC,IAAAA,MAAM,EAAEA,MAHO;AAIfC,IAAAA,OAAO,EAAEA;AAJM,GAAnB,CAF4E,CAS7E;;AACCC,EAAAA,UAAU,CAACT,IAAX,GAAkB,IAAIC,IAAJ,GAAWC,WAAX,EAAlB;AAEA,SAAOnC,KAAK,CAACL,OAAO,GAAG,UAAX,EAAuB;AAC/BM,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAesC,UAAf,CAFyB;AAG/BrC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHsB;AAM/B;AACAC,IAAAA,WAAW,EAAE;AAPkB,GAAvB,CAAL,CASNC,IATM,CASDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAjBI,EAkBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GApBI,EAqBNH,IArBM,CAqBDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EArBX,EAsBNP,IAtBM,CAsBDC,QAAQ,IAAIV,QAAQ,CAACiB,UAAU,CAACP,QAAD,CAAX,CAtBnB,EAuBNS,KAvBM,CAuBAP,KAAK,IAAK;AAAEQ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,KAAK,CAACU,OAAnC;AAA6CJ,IAAAA,KAAK,CAAC,8CAA4CN,KAAK,CAACU,OAAnD,CAAL;AAAmE,GAvB5H,CAAP;AAwBD,CApCM;AAuCP,OAAO,MAAML,UAAU,GAAI0B,OAAD,KAAc;AACtClB,EAAAA,IAAI,EAAE7B,WAAW,CAAC8B,WADoB;AAEtCC,EAAAA,OAAO,EAAEgB;AAF6B,CAAd,CAAnB,C,CAOP;;AAEA,OAAO,MAAME,YAAY,GAAG,MAAO7C,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC8C,cAAc,CAAC,IAAD,CAAf,CAAR;AAEA,SAAO5C,KAAK,CAACL,OAAO,GAAG,SAAX,CAAL,CACNY,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAImC,OAAO,GAAG,IAAIlC,KAAJ,CAAUD,KAAK,CAACU,OAAhB,CAAd;AACA,UAAMyB,OAAN;AACL,GAbI,EAcNtC,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EAdX,EAeNP,IAfM,CAeDuC,OAAO,IAAIhD,QAAQ,CAACiD,UAAU,CAACD,OAAD,CAAX,CAflB,EAgBN7B,KAhBM,CAgBAP,KAAK,IAAIZ,QAAQ,CAACkD,aAAa,CAACtC,KAAK,CAACU,OAAP,CAAd,CAhBjB,CAAP;AAkBD,CArBM;AAwBP,OAAO,MAAMwB,cAAc,GAAG,OAAO;AACnCrB,EAAAA,IAAI,EAAE7B,WAAW,CAACuD;AADiB,CAAP,CAAvB;AAIP,OAAO,MAAMD,aAAa,GAAKH,OAAD,IAAa;AACzC,SAAO;AACPtB,IAAAA,IAAI,EAAE7B,WAAW,CAACwD,cADX;AAEPzB,IAAAA,OAAO,EAAEoB;AAFF,GAAP;AAGD,CAJM;AAMP,OAAO,MAAME,UAAU,GAAID,OAAD,IAAa;AACrC;AACA,SAAO;AACLvB,IAAAA,IAAI,EAAE7B,WAAW,CAACyD,WADb;AAEL1B,IAAAA,OAAO,EAAEqB;AAFJ,GAAP;AAID,CANM;AAQP;;;;;;AAOA;;AAGA,OAAO,MAAMM,WAAW,GAAG,MAAOtD,QAAD,IAAc;AAC3CA,EAAAA,QAAQ,CAACuD,aAAa,CAAC,IAAD,CAAd,CAAR;AAEA,SAAOrD,KAAK,CAACL,OAAO,GAAG,QAAX,CAAL,CACNY,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAImC,OAAO,GAAG,IAAIlC,KAAJ,CAAUD,KAAK,CAACU,OAAhB,CAAd;AACA,UAAMyB,OAAN;AACL,GAbI,EAcNtC,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EAdX,EAeNP,IAfM,CAeD+C,MAAM,IAAIxD,QAAQ,CAACyD,SAAS,CAACD,MAAD,CAAV,CAfjB,EAgBNrC,KAhBM,CAgBAP,KAAK,IAAIZ,QAAQ,CAAC0D,YAAY,CAAC9C,KAAK,CAACU,OAAP,CAAb,CAhBjB,CAAP;AAkBH,CArBM,C,CAwBP;;AACA,OAAO,MAAMiC,aAAa,GAAG,OAAO;AAChC9B,EAAAA,IAAI,EAAE7B,WAAW,CAAC+D;AADc,CAAP,CAAtB;AAIP,OAAO,MAAMD,YAAY,GAAKX,OAAD,IAAa;AACtC;AACA,SAAO;AACPtB,IAAAA,IAAI,EAAE7B,WAAW,CAACgE,aADX;AAEPjC,IAAAA,OAAO,EAAEoB;AAFF,GAAP;AAGH,CALM;AAOP,OAAO,MAAMU,SAAS,GAAID,MAAD,KAAa;AAClC/B,EAAAA,IAAI,EAAE7B,WAAW,CAACiE,UADgB;AAElClC,EAAAA,OAAO,EAAE6B;AAFyB,CAAb,CAAlB,C,CAMP;;AAEA,OAAO,MAAMM,aAAa,GAAG,MAAO9D,QAAD,IAAc;AAC7C,SAAOE,KAAK,CAACL,OAAO,GAAG,UAAX,CAAL,CACNY,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAImC,OAAO,GAAG,IAAIlC,KAAJ,CAAUD,KAAK,CAACU,OAAhB,CAAd;AACA,UAAMyB,OAAN;AACL,GAbI,EAcNtC,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EAdX,EAeNP,IAfM,CAeDsD,QAAQ,IAAI/D,QAAQ,CAACgE,WAAW,CAACD,QAAD,CAAZ,CAfnB,EAgBN5C,KAhBM,CAgBAP,KAAK,IAAIZ,QAAQ,CAACiE,cAAc,CAACrD,KAAK,CAACU,OAAP,CAAf,CAhBjB,CAAP;AAiBH,CAlBM;AAoBP,OAAO,MAAM2C,cAAc,GAAIlB,OAAD,KAAc;AACxCtB,EAAAA,IAAI,EAAE7B,WAAW,CAACsE,eADsB;AAExCvC,EAAAA,OAAO,EAAEoB;AAF+B,CAAd,CAAvB;AAKP,OAAO,MAAMiB,WAAW,GAAID,QAAD,KAAe;AACtCtC,EAAAA,IAAI,EAAE7B,WAAW,CAACuE,YADoB;AAEtCxC,EAAAA,OAAO,EAAEoC;AAF6B,CAAf,CAApB,C,CAMP;;AAEA,OAAO,MAAMK,WAAW,GAAG,MAAOpE,QAAD,IAAc;AAE3CA,EAAAA,QAAQ,CAACqE,aAAa,EAAd,CAAR;AAEA,SAAOnE,KAAK,CAACL,OAAO,GAAG,YAAX,CAAL,CACNY,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAImC,OAAO,GAAG,IAAIlC,KAAJ,CAAUD,KAAK,CAACU,OAAhB,CAAd;AACA,UAAMyB,OAAN;AACL,GAbI,EAcNtC,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACM,IAAT,EAdX,EAeNP,IAfM,CAeD6D,MAAM,IAAItE,QAAQ,CAACuE,SAAS,CAACD,MAAD,CAAV,CAfjB,EAgBNnD,KAhBM,CAgBAP,KAAK,IAAIZ,QAAQ,CAACwE,YAAY,CAAC5D,KAAK,CAACU,OAAP,CAAb,CAhBjB,CAAP;AAiBH,CArBM;AAuBP,OAAO,MAAM+C,aAAa,GAAG,OAAO;AAChC5C,EAAAA,IAAI,EAAE7B,WAAW,CAAC6E;AADc,CAAP,CAAtB;AAIP,OAAO,MAAMD,YAAY,GAAIzB,OAAD,KAAc;AACtCtB,EAAAA,IAAI,EAAE7B,WAAW,CAAC8E,aADoB;AAEtC/C,EAAAA,OAAO,EAAEoB;AAF6B,CAAd,CAArB;AAKP,OAAO,MAAMwB,SAAS,GAAID,MAAD,KAAa;AAClC7C,EAAAA,IAAI,EAAE7B,WAAW,CAAC+E,UADgB;AAElChD,EAAAA,OAAO,EAAE2C;AAFyB,CAAb,CAAlB","sourcesContent":["\nimport * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n///////////putContnet///////////\n\nexport const putContent = (title) => (dispatch) => {\n\n  const newFeedback = {\n    title: title\n  };\n  \n  return fetch(baseUrl + 'content', {\n      method: \"POST\",\n      body: JSON.stringify(newFeedback),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => {\n    dispatch(addComment(response));\n    alert('Your feedback was submited successfully');\n  })\n  .catch(error =>  { console.log('submmit feedback', error.message);\n   alert('Your feedback could not be submited\\nError: '+error.message); });\n};\n\nexport const upda = (feedback) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: feedback\n});\n\n\n\n\n///////////feedback///////////\n\nexport const submitFeedback = ( firstName, lastName, telNum, email, agree, contactType, message) => (dispatch) => {\n\n  const newFeedback = {\n    firstName: firstName,\n    lastName: lastName,\n    telNum: telNum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  \n //previesdly the id and the date where added in comments.js\n  newFeedback.date = new Date().toISOString();\n  \n  return fetch(baseUrl + 'feedback', {\n      method: \"POST\",\n      body: JSON.stringify(newFeedback),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //related to the backend \n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => {\n    dispatch(addFeedback(response));\n    alert('Your feedback was submited successfully');\n  })\n  .catch(error =>  { console.log('submmit feedback', error.message);\n   alert('Your feedback could not be submited\\nError: '+error.message); });\n};\n\nexport const addFeedback = (feedback) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: feedback\n});\n\n\n\n///////////comments////////////\n\n//since this is a punc, I need to add the dispatch. So, I'll send the function of a function\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n  const newComment = {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n  };\n  \n //previesdly the id and the date where added in comments.js\n  newComment.date = new Date().toISOString();\n  \n  return fetch(baseUrl + 'comments', {\n      method: \"POST\",\n      body: JSON.stringify(newComment),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //related to the backend \n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .then(response => dispatch(addComment(response)))\n  .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\n};\n\n\nexport const addComment = (comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\n\n\n\n//////////// LEADERS //////////////\n\nexport const fetchLeaders = () => (dispatch) => {\n  dispatch(leadersLoading(true));\n\n  return fetch(baseUrl + 'leaders')\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          var errmess = new Error(error.message);\n          throw errmess;\n    })\n  .then(response => response.json())\n  .then(leaders => dispatch(addLeaders(leaders)))\n  .catch(error => dispatch(leadersFailed(error.message)));\n\n}\n\n\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = ((errmess) => {\n  return({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess});\n});\n\nexport const addLeaders = (leaders) => {\n  //alert(\"action creator, leader: \"+ JSON.stringify(leaders))\n  return({\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n  });\n}\n\n/*\nexport const addLeaders = (leaders) => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\n*/\n\n//////////// DISHES //////////////\n\n\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishes')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n\n}\n\n\n//returning an action\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = ((errmess) => {\n    //alert(\"actionCreator.js - dishesFailed: \"+ errmess);\n    return({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess});\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n\n//////////// COMMENTS //////////////\n\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + 'comments')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n\n//////////// PROMOTIONS //////////////\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + 'promotions')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});"]},"metadata":{},"sourceType":"module"}