{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/filterOutFalsy.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/utils/deepEqual.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(object: FieldValues, path: string, value: unknown) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<FieldValues>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    { ...((shallowFieldsStateRef || {}).current || {}) },\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types';\n\nexport default (error: FieldError, currentError?: FieldError): boolean =>\n  isObject(error) &&\n  isObject(currentError) &&\n  error.type === currentError.type &&\n  error.message === currentError.message &&\n  Object.keys(error.types || {}).length ===\n    Object.keys(currentError.types || {}).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => (currentError.types || {})[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  NonUndefined,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {},\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, () => void>\n  >({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : defaultValues,\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        !fieldsRef.current[name] ||\n        (!readFormStateRef.current.isDirty &&\n          !readFormStateRef.current.dirtyFields)\n      ) {\n        return {};\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n\n      isFieldDirty\n        ? set(formStateRef.current.dirtyFields, name, true)\n        : unset(formStateRef.current.dirtyFields, name);\n\n      const state = {\n        isDirty:\n          (isFieldArray &&\n            !deepEqual(\n              get(getValues(), getFieldArrayParentName(name)),\n              get(defaultValuesRef.current, getFieldArrayParentName(name)),\n            )) ||\n          !isEmptyObject(formStateRef.current.dirtyFields),\n        dirtyFields: formStateRef.current.dirtyFields,\n      };\n\n      const isChanged =\n        (readFormStateRef.current.isDirty &&\n          previousIsDirty !== state.isDirty) ||\n        (readFormStateRef.current.dirtyFields &&\n          isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n      if (isChanged && shouldRender) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        updateFormState({\n          ...state,\n        });\n      }\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            updateAndGetDirtyState(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (\n          isNameInFieldArray(fieldArrayNamesRef.current, name) ||\n          fieldArrayNamesRef.current.has(name)\n        ) {\n          const fieldArrayParentName = getFieldArrayParentName(name) || name;\n          fieldArrayDefaultValuesRef.current[fieldArrayParentName] = value;\n          resetFieldArrayFunctionRef.current[fieldArrayParentName]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name)) ||\n          !useWatchFieldsRef.current[key].size\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    if (isFieldWatched(name)) {\n      updateFormState();\n    }\n\n    renderWatchedInputs(name);\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return getFieldsValues(fieldsRef, shallowFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n      const isValid = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValid) {\n        updateFormState({\n          isValid,\n        });\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          delete defaultValuesAtRenderRef.current[field.ref.name];\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          unset(formStateRef.current.dirtyFields, field.ref.name);\n          unset(formStateRef.current.touched, field.ref.name);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: !isEmptyObject(formStateRef.current.dirtyFields),\n            dirtyFields: formStateRef.current.dirtyFields,\n            touched: formStateRef.current.touched,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(\n    name: FieldName<TFieldValues>,\n    error: ErrorOption = {},\n  ): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (fieldNames) {\n          const fieldRefNames = Object.keys(fieldsRef.current);\n\n          if (fieldRefNames.length) {\n            (isArray(fieldNames) ? fieldNames : [fieldNames]).forEach(\n              (name) => {\n                if (\n                  !fieldRefNames.find((fieldName) => fieldName.startsWith(name))\n                ) {\n                  console.warn(\n                    `📋 watched fields: ${fieldNames} are not found.`,\n                  );\n                }\n              },\n            );\n          }\n        }\n      }\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = getFieldsValues(fieldsRef, shallowFieldsStateRef, true);\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isValid: isValid ? formStateRef.current.isValid : true,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    shouldUnregister,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport filterOutFalsy from './filterOutFalsy';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return filterOutFalsy(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((isArray(value) ? value : [value]) as T[]).map(mapValueToBoolean).flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './utils/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport filterBooleanArray from './utils/filterBooleanArray';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n} from './types';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...value,\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n\n    if (!name) {\n      console.warn(\n        '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    formStateRef: {\n      current: { dirtyFields, touched },\n    },\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(defaultValuesRef.current, name, [])),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = {};\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !filterOutFalsy(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    isDirty = true,\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n      cleanup(shallowFieldsStateRef.current);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      const output = method(get(touched, name), args.argA, args.argB);\n      shouldSet && set(touched, name, output);\n      cleanup(touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(get(dirtyFields, name, []), args.argC, args.argD);\n      shouldSet && set(dirtyFields, name, output);\n      cleanup(dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields,\n      isDirty,\n      touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFields, name, [\n        ...(isArray(get(dirtyFields, name))\n          ? get(dirtyFields, name)\n          : fillEmptyArray(allFields.current)),\n        ...filterBooleanArray(value),\n      ]);\n      updateFormState({\n        isDirty: true,\n        dirtyFields,\n      });\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n    renderWatchedInputs(name);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(prependAt, {\n      argA: emptyArray,\n      argC: filterBooleanArray(value),\n    });\n    renderWatchedInputs(name);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      getIsDirtyState(removeArrayAt(fieldValues, index)),\n      true,\n      true,\n    );\n\n    renderWatchedInputs(name);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: filterBooleanArray(value),\n      },\n      getIsDirtyState(insertAt(fieldValues, index)),\n    );\n    renderWatchedInputs(name);\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n    renderWatchedInputs(name);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n    renderWatchedInputs(name);\n  };\n\n  const reset = <TFieldValues>(\n    data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ) => {\n    resetFields();\n    !data && unset(fieldArrayDefaultValuesRef.current, name);\n    unset(shallowFieldsStateRef.current, name);\n    memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = reset;\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error(\n      '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n    );\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n      );\n    }\n\n    if ((!as && !render) || (as && render)) {\n      console.warn(\n        `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n      );\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !isSameError(previousError, error)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport isObject from './utils/isObject';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n\n    if (name === '') {\n      console.warn(\n        '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value) ? { ...value } : isArray(value) ? [...value] : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","_a","_c","__read","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","search","output","name_1","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","transformToNestObject","error","currentError","message","types","every","_b","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","__values","_l","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","deepEqual","object1","object2","keys1","keys2","keys1_1","val1","val2","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","formStateRef","dirtyFields","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","renderWatchedInputs","getValues","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","allFields","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","resetFields","cleanup","batchStateUpdate","method","args","shouldSet","shouldUpdateValid","argA","argB","argC","argD","reset","defaultValues","pop","shouldRenderUseWatch","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","filterBooleanArray","append","remove","removeArrayAt","insertAt","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","formState","setFormState","observerRef","_k","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isSameError","shouldRenderBasedOnError","setFieldValue","rawValue","radioRef","selectRef","selected","includes","checkboxRef","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","found","size","payload","payload_1","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","options_1","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","name_2","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}