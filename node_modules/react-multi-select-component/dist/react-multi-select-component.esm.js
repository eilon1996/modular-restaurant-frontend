import { css } from 'goober';
import React, { useRef, useEffect, useState } from 'react';

/**
 * Filters React Select options and sorts by similarity to a search filter.
 * Handles partial matches, eg. searching for "Waberg High" will find "Raoul
 * Wallenberg Traditional High School". Case insensitive. Ignores
 * non-alphanumeric characters.
 *
 * @param  options  An unfiltered list of Options.
 * @param? filter  A string to compare against Option labels.
 * @param? substitutions  Strings with multiple spellings or variations that we
 *           expect to match, eg. accented characters or abbreviated words.
 *
 * @return A filtered and sorted array of Options.
 */
function filterOptions(options, filter, substitutions) {
  // If the filter is blank, return the full list of Options.
  if (!filter) {
    return options;
  }

  var cleanFilter = cleanUpText(filter, substitutions);
  return options // Filter out undefined or null Options.
  .filter(function (_ref) {
    var label = _ref.label,
        value = _ref.value;
    return label != null && value != null;
  }) // Create a {score, Option} pair for each Option based on its label's
  // similarity to the filter text.
  .map(function (option) {
    return {
      option: option,
      score: typeaheadSimilarity(cleanUpText(option.label, substitutions), cleanFilter)
    };
  }) // Only include matches of the entire substring, with a slight
  // affordance for transposition or extra characters.
  .filter(function (pair) {
    return pair.score >= cleanFilter.length - 2;
  }) // Sort 'em by order of their score.
  .sort(function (a, b) {
    return b.score - a.score;
  }) // …and grab the original Options back from their pairs.
  .map(function (pair) {
    return pair.option;
  });
}
/**
 * Scores the similarity between two strings by returning the length of the
 * longest common subsequence. Intended for comparing strings of different
 * lengths; eg. when matching a typeahead search input with a school name.

 * Meant for use in an instant search box where results are being fetched
 * as a user is typing.
 *
 * @param  a  The longer string (though, we flip them if it's shorter).
 * @param  b  The shorter string, eg. a typeahead search input.
 *
 * @return The length of the longest common subsequence. Higher scores indicate
 *           closer matches.
 */

function typeaheadSimilarity(a, b) {
  var aLength = a.length;
  var bLength = b.length;
  var table = [];

  if (!aLength || !bLength) {
    return 0;
  } // Ensure `a` isn't shorter than `b`.


  if (aLength < bLength) {
    var _ref2 = [b, a];
    a = _ref2[0];
    b = _ref2[1];
  } // Early exit if `a` includes `b`; these will be scored higher than any
  // other options with the same `b` (filter string), with a preference for
  // shorter `a` strings (option labels).


  if (a.indexOf(b) !== -1) {
    return bLength + 1 / aLength;
  } // Initialize the table axes:
  //
  //    0 0 0 0 ... bLength
  //    0
  //    0
  //
  //   ...
  //
  // aLength
  //


  for (var x = 0; x <= aLength; ++x) {
    table[x] = [0];
  }

  for (var y = 0; y <= bLength; ++y) {
    table[0][y] = 0;
  } // Populate the rest of the table with a dynamic programming algorithm.


  for (var _x = 1; _x <= aLength; ++_x) {
    for (var _y = 1; _y <= bLength; ++_y) {
      table[_x][_y] = a[_x - 1] === b[_y - 1] ? 1 + table[_x - 1][_y - 1] : Math.max(table[_x][_y - 1], table[_x - 1][_y]);
    }
  }

  return table[aLength][bLength];
}
/**
 * Apply string substitutions, remove non-alphanumeric characters, and convert
 * all letters to uppercase.
 *
 * eg. 'Scoil Bhríde Primary School' may become 'SCOILBHRIDEPRIMARYSCHOOL'.
 *
 * @param  input  An unsanitized input string.
 * @param  substitutions  Strings with multiple spellings or variations that we
 *          expect to match, for example accented characters or abbreviated
 *          words.
 *
 * @return The sanitized text.
 */

function cleanUpText(input, substitutions) {
  if (!input) {
    return "";
  } // Uppercase and remove all non-alphanumeric, non-accented characters.
  // Also remove underscores.


  input = input.toUpperCase().replace(/((?=[^\u00E0-\u00FC])\W)|_/g, "");

  if (!substitutions) {
    return input;
  }

  var safeSubstitutions = substitutions; // For Flow.
  // Replace all strings in `safeSubstitutions` with their standardized
  // counterparts.

  return Object.keys(safeSubstitutions).reduce(function (output, substitution) {
    var unsubbed = new RegExp(substitution, "g");
    return output.replace(unsubbed, safeSubstitutions[substitution]);
  }, input);
}

var strings = {
  selectSomeItems: "Select...",
  allItemsAreSelected: "All items are selected.",
  selectAll: "Select All",
  search: "Search",
  clearSearch: "Clear Search"
};
function getString(key, overrideStrings) {
  return (overrideStrings === null || overrideStrings === void 0 ? void 0 : overrideStrings[key]) || strings[key];
}

var Cross = function Cross() {
  return React.createElement("svg", {
    width: "24",
    height: "24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    className: "dropdown-search-clear-icon gray"
  }, React.createElement("line", {
    x1: "18",
    y1: "6",
    x2: "6",
    y2: "18"
  }), React.createElement("line", {
    x1: "6",
    y1: "6",
    x2: "18",
    y2: "18"
  }));
};

var DefaultRenderer = /*#__PURE__*/css({
  "& input,& span": {
    verticalAlign: "middle",
    margin: 0
  },
  span: {
    display: "inline-block",
    paddingLeft: "5px"
  },
  "&.disabled": {
    opacity: 0.5
  }
});

var DefaultItemRenderer = function DefaultItemRenderer(_ref) {
  var checked = _ref.checked,
      option = _ref.option,
      onClick = _ref.onClick,
      disabled = _ref.disabled;
  return React.createElement("div", {
    className: DefaultRenderer + " item-renderer " + (disabled && "disabled")
  }, React.createElement("input", {
    type: "checkbox",
    onChange: onClick,
    checked: checked,
    tabIndex: -1,
    disabled: disabled
  }), React.createElement("span", null, option.label));
};

/**
 * This component represents an individual item in the multi-select drop-down
 */
var ItemContainer = /*#__PURE__*/css({
  boxSizing: "border-box",
  cursor: "pointer",
  display: "block",
  padding: "var(--rmsc-p)",
  outline: 0,
  "&:hover,&:focus": {
    background: "var(--rmsc-hover)"
  },
  "&.selected": {
    background: "var(--rmsc-selected)"
  }
});

var SelectItem = function SelectItem(_ref) {
  var _ref$itemRenderer = _ref.itemRenderer,
      ItemRenderer = _ref$itemRenderer === void 0 ? DefaultItemRenderer : _ref$itemRenderer,
      option = _ref.option,
      checked = _ref.checked,
      focused = _ref.focused,
      tabIndex = _ref.tabIndex,
      disabled = _ref.disabled,
      onSelectionChanged = _ref.onSelectionChanged,
      onClick = _ref.onClick;
  var itemRef = useRef();
  useEffect(function () {
    updateFocus(); // eslint-disable-next-line
  }, [focused]);

  var toggleChecked = function toggleChecked() {
    onSelectionChanged(!checked);
  };

  var handleClick = function handleClick(e) {
    toggleChecked();
    onClick(e);
  };

  var updateFocus = function updateFocus() {
    if (focused && !disabled && itemRef) {
      itemRef.current.focus();
    }
  };

  var handleKeyDown = function handleKeyDown(e) {
    switch (e.which) {
      case 13: // Enter

      case 32:
        // Space
        toggleChecked();
        break;

      default:
        return;
    }

    e.preventDefault();
  };

  return React.createElement("label", {
    className: ItemContainer + " select-item " + (checked && "selected"),
    role: "option",
    "aria-selected": checked,
    tabIndex: tabIndex,
    ref: itemRef,
    onKeyDown: handleKeyDown
  }, React.createElement(ItemRenderer, {
    option: option,
    checked: checked,
    onClick: handleClick,
    disabled: disabled
  }));
};

/**
 * This component represents an unadorned list of SelectItem (s).
 */
var SelectListUl = /*#__PURE__*/css({
  margin: 0,
  paddingLeft: 0,
  li: {
    listStyle: "none",
    margin: 0
  }
});
var skipIndex = 2;

var SelectList = function SelectList(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      disabled = _ref.disabled,
      ItemRenderer = _ref.ItemRenderer,
      options = _ref.options,
      focusIndex = _ref.focusIndex,
      _onClick = _ref.onClick;

  var handleSelectionChanged = function handleSelectionChanged(option, checked) {
    if (disabled) {
      return;
    }

    onChange(checked ? [].concat(value, [option]) : value.filter(function (o) {
      return o.value !== option.value;
    }));
  };

  return React.createElement("ul", {
    className: SelectListUl
  }, options.map(function (o, i) {
    var tabIndex = i + skipIndex;
    return React.createElement("li", {
      key: o.hasOwnProperty("key") ? o.key : i
    }, React.createElement(SelectItem, {
      focused: focusIndex === tabIndex,
      tabIndex: tabIndex,
      option: o,
      onSelectionChanged: function onSelectionChanged(c) {
        return handleSelectionChanged(o, c);
      },
      checked: value.find(function (s) {
        return s.value === o.value;
      }) ? true : false,
      onClick: function onClick(e) {
        return _onClick(e, tabIndex);
      },
      itemRenderer: ItemRenderer,
      disabled: o.disabled || disabled
    }));
  }));
};

/**
 * This component represents the entire panel which gets dropped down when the
 * user selects the component.  It encapsulates the search filter, the
 * Select-all item, and the list of options.
 */
var FocusType;

(function (FocusType) {
  FocusType[FocusType["SEARCH"] = -1] = "SEARCH";
  FocusType[FocusType["NONE"] = 1] = "NONE";
})(FocusType || (FocusType = {}));

var SelectSearchContainer = /*#__PURE__*/css({
  width: "100%",
  position: "relative",
  borderBottom: "1px solid var(--rmsc-border)",
  input: {
    height: "var(--rmsc-h)",
    padding: "0 var(--rmsc-p)",
    width: "100%",
    outline: 0,
    border: 0
  }
});
var SearchClearButton = /*#__PURE__*/css({
  cursor: "pointer",
  position: "absolute",
  top: 0,
  right: 0,
  bottom: 0,
  background: "none",
  border: 0,
  padding: "0 calc(var(--rmsc-p)/2)",
  "[hidden]": {
    display: "none"
  }
});
var SelectPanel = function SelectPanel(props) {
  var onChange = props.onChange,
      options = props.options,
      value = props.value,
      customFilterOptions = props.filterOptions,
      selectAllLabel = props.selectAllLabel,
      ItemRenderer = props.ItemRenderer,
      disabled = props.disabled,
      disableSearch = props.disableSearch,
      focusSearchOnOpen = props.focusSearchOnOpen,
      hasSelectAll = props.hasSelectAll,
      overrideStrings = props.overrideStrings,
      ClearIcon = props.ClearIcon;

  var _useState = useState(""),
      searchText = _useState[0],
      setSearchText = _useState[1];

  var _useState2 = useState(focusSearchOnOpen && !disableSearch ? FocusType.SEARCH : FocusType.NONE),
      focusIndex = _useState2[0],
      setFocusIndex = _useState2[1];

  var _useState3 = useState(),
      selectAllLength = _useState3[0],
      setSelectAllLength = _useState3[1];

  var selectAllOption = {
    label: selectAllLabel || getString("selectAll", overrideStrings),
    value: ""
  };
  useEffect(function () {
    setSelectAllLength(selectAllValues(true).length); // eslint-disable-next-line
  }, [options]);

  var selectAllValues = function selectAllValues(checked) {
    var selectedValues = value.map(function (o) {
      return o.value;
    });
    return options.filter(function (_ref) {
      var disabled = _ref.disabled,
          value = _ref.value;

      if (checked) {
        return !disabled || selectedValues.includes(value);
      }

      return disabled && selectedValues.includes(value);
    });
  };

  var selectAllChanged = function selectAllChanged(checked) {
    var newOptions = selectAllValues(checked);
    onChange(newOptions);
  };

  var handleSearchChange = function handleSearchChange(e) {
    setSearchText(e.target.value);
    setFocusIndex(FocusType.SEARCH);
  };

  var handleClear = function handleClear() {
    return setSearchText("");
  };

  var handleItemClicked = function handleItemClicked(index) {
    return setFocusIndex(index);
  };

  var handleKeyDown = function handleKeyDown(e) {
    switch (e.which) {
      case 38:
        // Up Arrow
        if (e.altKey) {
          return;
        }

        updateFocus(-1);
        break;

      case 40:
        // Down Arrow
        if (e.altKey) {
          return;
        }

        updateFocus(1);
        break;

      default:
        return;
    }

    e.stopPropagation();
    e.preventDefault();
  };

  var handleSearchFocus = function handleSearchFocus() {
    setFocusIndex(FocusType.SEARCH);
  };

  var filteredOptions = function filteredOptions() {
    return customFilterOptions ? customFilterOptions(options, searchText) : filterOptions(options, searchText);
  };

  var updateFocus = function updateFocus(offset) {
    var newFocus = focusIndex + offset;
    newFocus = Math.max(1, newFocus);
    newFocus = Math.min(newFocus, options.length);
    setFocusIndex(newFocus);
  };

  return React.createElement("div", {
    className: "select-panel",
    role: "listbox",
    onKeyDown: handleKeyDown
  }, !disableSearch && React.createElement("div", {
    className: SelectSearchContainer
  }, React.createElement("input", {
    autoFocus: focusSearchOnOpen,
    placeholder: getString("search", overrideStrings),
    type: "text",
    "aria-describedby": getString("search", overrideStrings),
    onChange: handleSearchChange,
    onFocus: handleSearchFocus,
    value: searchText
  }), React.createElement("button", {
    className: SearchClearButton + " search-clear-button",
    hidden: !searchText,
    onClick: handleClear,
    "aria-label": getString("clearSearch", overrideStrings)
  }, ClearIcon || React.createElement(Cross, null))), hasSelectAll && !searchText && React.createElement(SelectItem, {
    focused: focusIndex === 1,
    tabIndex: 1,
    checked: selectAllLength === value.length,
    option: selectAllOption,
    onSelectionChanged: selectAllChanged,
    onClick: function onClick() {
      return handleItemClicked(0);
    },
    itemRenderer: ItemRenderer,
    disabled: disabled
  }), React.createElement(SelectList, Object.assign({}, props, {
    options: filteredOptions(),
    focusIndex: focusIndex,
    onClick: function onClick(_e, index) {
      return handleItemClicked(index);
    },
    ItemRenderer: ItemRenderer,
    disabled: disabled
  })));
};

function Arrow(_ref) {
  var expanded = _ref.expanded;
  return React.createElement("svg", {
    width: "24",
    height: "24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    className: "dropdown-heading-dropdown-arrow gray"
  }, React.createElement("path", {
    d: expanded ? "M18 15 12 9 6 15" : "M6 9L12 15 18 9"
  }));
}

var Spinner = /*#__PURE__*/css({
  animation: "rotate 2s linear infinite",
  "& .path": {
    stroke: "var(--rmsc-border)",
    strokeWidth: "4px",
    strokeLinecap: "round",
    animation: "dash 1.5s ease-in-out infinite"
  },
  "@keyframes rotate": {
    "100%": {
      transform: "rotate(360deg)"
    }
  },
  "@keyframes dash": {
    "0%": {
      strokeDasharray: "1,150",
      strokeDashoffset: 0
    },
    "50%": {
      strokeDasharray: "90,150",
      strokeDashoffset: "-35"
    },
    "100%": {
      strokeDasharray: "90,150",
      strokeDashoffset: "-124"
    }
  }
});

function Loading(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 24 : _ref$size;
  return React.createElement("span", {
    style: {
      width: size,
      marginRight: "0.2rem"
    }
  }, React.createElement("svg", {
    width: size,
    height: size,
    className: Spinner,
    viewBox: "0 0 50 50",
    style: {
      display: "inline",
      verticalAlign: "middle"
    }
  }, React.createElement("circle", {
    cx: "25",
    cy: "25",
    r: "20",
    fill: "none",
    className: "path"
  })));
}

/**
 * A generic dropdown component.  It takes the children of the component
 * and hosts it in the component.  When the component is selected, it
 * drops-down the contentComponent and applies the contentProps.
 */
var PanelContainer = /*#__PURE__*/css({
  position: "absolute",
  zIndex: 1,
  top: "100%",
  width: "100%",
  paddingTop: "8px",
  ".panel-content": {
    maxHeight: "300px",
    overflowY: "auto",
    borderRadius: "var(--rmsc-radius)",
    background: "var(--rmsc-bg)",
    boxShadow: "0 0 0 1px rgba(0, 0, 0, 0.1), 0 4px 11px rgba(0, 0, 0, 0.1)"
  }
});
var DropdownContainer = /*#__PURE__*/css({
  position: "relative",
  outline: 0,
  backgroundColor: "var(--rmsc-bg)",
  border: "1px solid var(--rmsc-border)",
  borderRadius: "var(--rmsc-radius)",
  "&:focus-within": {
    boxShadow: "var(--rmsc-main) 0 0 0 1px",
    borderColor: "var(--rmsc-main)"
  }
});
var DropdownHeading = /*#__PURE__*/css({
  position: "relative",
  padding: "0 var(--rmsc-p)",
  display: "flex",
  alignItems: "center",
  width: "100%",
  height: "var(--rmsc-h)",
  cursor: "default",
  outline: 0,
  ".dropdown-heading-value": {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    flex: 1
  }
});

var Dropdown = function Dropdown(_ref) {
  var children = _ref.children,
      ContentComponent = _ref.contentComponent,
      contentProps = _ref.contentProps,
      isLoading = _ref.isLoading,
      disabled = _ref.disabled,
      shouldToggleOnHover = _ref.shouldToggleOnHover,
      labelledBy = _ref.labelledBy,
      onMenuToggle = _ref.onMenuToggle,
      ArrowRenderer = _ref.ArrowRenderer;

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var _useState2 = useState(false),
      hasFocus = _useState2[0],
      setHasFocus = _useState2[1];

  var FinalArrow = ArrowRenderer || Arrow;
  var wrapper = useRef();
  /* eslint-disable react-hooks/exhaustive-deps */

  useEffect(function () {
    onMenuToggle && onMenuToggle(expanded);
  }, [expanded]);

  var handleKeyDown = function handleKeyDown(e) {
    var _wrapper$current;

    switch (e.which) {
      case 27: // Escape

      case 38:
        // Up Arrow
        setExpanded(false);
        wrapper === null || wrapper === void 0 ? void 0 : (_wrapper$current = wrapper.current) === null || _wrapper$current === void 0 ? void 0 : _wrapper$current.focus();
        break;

      case 32: // Space

      case 13: // Enter Key

      case 40:
        // Down Arrow
        setExpanded(true);
        break;

      default:
        return;
    }

    e.preventDefault();
  };

  var handleHover = function handleHover(iexpanded) {
    shouldToggleOnHover && setExpanded(iexpanded);
  };

  var handleFocus = function handleFocus() {
    return !hasFocus && setHasFocus(true);
  };

  var handleBlur = function handleBlur(e) {
    if (!e.currentTarget.contains(e.relatedTarget)) {
      setHasFocus(false);
      setExpanded(false);
    }
  };

  var handleMouseEnter = function handleMouseEnter() {
    return handleHover(true);
  };

  var handleMouseLeave = function handleMouseLeave() {
    return handleHover(false);
  };

  var toggleExpanded = function toggleExpanded() {
    return setExpanded(isLoading || disabled ? false : !expanded);
  };

  return React.createElement("div", {
    tabIndex: 0,
    className: DropdownContainer + " dropdown-container",
    "aria-labelledby": labelledBy,
    "aria-expanded": expanded,
    "aria-readonly": true,
    "aria-disabled": disabled,
    ref: wrapper,
    onKeyDown: handleKeyDown,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, React.createElement("div", {
    className: DropdownHeading + " dropdown-heading",
    onClick: toggleExpanded
  }, React.createElement("div", {
    className: "dropdown-heading-value"
  }, children), isLoading && React.createElement(Loading, null), React.createElement(FinalArrow, {
    expanded: expanded
  })), expanded && React.createElement("div", {
    className: PanelContainer + " dropdown-content"
  }, React.createElement("div", {
    className: "panel-content"
  }, React.createElement(ContentComponent, Object.assign({}, contentProps)))));
};

var DropdownHeader = function DropdownHeader(_ref) {
  var value = _ref.value,
      options = _ref.options,
      valueRenderer = _ref.valueRenderer,
      overrideStrings = _ref.overrideStrings;
  var noneSelected = value.length === 0;
  var allSelected = value.length === options.length;
  var customText = valueRenderer && valueRenderer(value, options);

  var getSelectedText = function getSelectedText() {
    return value.map(function (s) {
      return s.label;
    }).join(", ");
  };

  return noneSelected ? React.createElement("span", {
    className: "gray"
  }, customText || getString("selectSomeItems", overrideStrings)) : React.createElement("span", null, customText || (allSelected ? getString("allItemsAreSelected", overrideStrings) : getSelectedText()));
};

var MultiSelectBox = /*#__PURE__*/css({
  "--rmscMain": "#4285f4",
  "--rmscHover": "#f1f3f5",
  "--rmscSelected": "#e2e6ea",
  "--rmscBorder": "#ccc",
  "--rmscGray": "#aaa",
  "--rmscBg": "#fff",
  "--rmscP": "10px",
  "--rmscRadius": "4px",
  "--rmscH": "38px",
  "*": {
    boxSizing: "border-box",
    transition: "all 0.2s ease"
  },
  ".gray": {
    color: "var(--rmsc-gray)"
  }
});

var MultiSelect = function MultiSelect(_ref) {
  var _ref$focusSearchOnOpe = _ref.focusSearchOnOpen,
      focusSearchOnOpen = _ref$focusSearchOnOpe === void 0 ? true : _ref$focusSearchOnOpe,
      _ref$hasSelectAll = _ref.hasSelectAll,
      hasSelectAll = _ref$hasSelectAll === void 0 ? true : _ref$hasSelectAll,
      shouldToggleOnHover = _ref.shouldToggleOnHover,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "multi-select" : _ref$className,
      options = _ref.options,
      value = _ref.value,
      valueRenderer = _ref.valueRenderer,
      overrideStrings = _ref.overrideStrings,
      onChange = _ref.onChange,
      disabled = _ref.disabled,
      ItemRenderer = _ref.ItemRenderer,
      ArrowRenderer = _ref.ArrowRenderer,
      selectAllLabel = _ref.selectAllLabel,
      isLoading = _ref.isLoading,
      disableSearch = _ref.disableSearch,
      filterOptions = _ref.filterOptions,
      labelledBy = _ref.labelledBy,
      onMenuToggle = _ref.onMenuToggle,
      ClearIcon = _ref.ClearIcon;
  var nvalue = value || [];
  return React.createElement("div", {
    className: MultiSelectBox + " " + className
  }, React.createElement(Dropdown, {
    isLoading: isLoading,
    contentComponent: SelectPanel,
    shouldToggleOnHover: shouldToggleOnHover,
    contentProps: {
      ItemRenderer: ItemRenderer,
      options: options,
      value: nvalue,
      hasSelectAll: hasSelectAll,
      selectAllLabel: selectAllLabel,
      onChange: onChange,
      disabled: disabled,
      disableSearch: disableSearch,
      focusSearchOnOpen: focusSearchOnOpen,
      filterOptions: filterOptions,
      overrideStrings: overrideStrings,
      ClearIcon: ClearIcon
    },
    disabled: disabled,
    labelledBy: labelledBy,
    onMenuToggle: onMenuToggle,
    ArrowRenderer: ArrowRenderer
  }, React.createElement(DropdownHeader, {
    value: nvalue,
    options: options,
    valueRenderer: valueRenderer,
    overrideStrings: overrideStrings
  })));
};

export default MultiSelect;
export { Dropdown, SelectItem, SelectPanel };
//# sourceMappingURL=react-multi-select-component.esm.js.map
